!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/3fdf28bc/
ABSTRACT_APP_STATE_H	abstractAppState.h	/^#define ABSTRACT_APP_STATE_H$/;"	d
AbstractAppState	abstractAppState.cpp	/^	AbstractAppState::AbstractAppState(){}$/;"	f	class:fsim::AbstractAppState
AbstractAppState	abstractAppState.h	/^	class AbstractAppState{$/;"	c	namespace:fsim
AircraftTabButton	playButton.cpp	/^							AircraftTabButton(GameManager *gm, Vector2 pos, Vector2 size, string name, string upgrade/;"	f	class:fsim::PlayButton::onClick::OkButton::onClick::AircraftTabButton	file:
AircraftTabButton	playButton.cpp	/^					class AircraftTabButton : public Button{$/;"	c	function:fsim::PlayButton::onClick::OkButton::onClick	file:
BACKSPACE	mapping.h	/^			BACKSPACE$/;"	e	enum:fsim::Mapping::Bind
BUTTON_H	button.h	/^#define BUTTON_H$/;"	d
Bind	mapping.h	/^		enum Bind{$/;"	g	struct:fsim::Mapping
Button	button.cpp	/^	Button::Button(GameManager *gm, Vector2 pos, Vector2 size,string name,bool separate,string imag/;"	f	class:fsim::Button
Button	button.h	/^	class Button{$/;"	c	namespace:fsim
CHINA	playerData.h	/^	enum Faction{CHINA,JAPAN,KOREA};$/;"	e	enum:fsim::Faction
DEFCONFIGS_H	defConfigs.h	/^#define DEFCONFIGS_H$/;"	d
EXIT_BUTTON_H	exitButton.h	/^#define EXIT_BUTTON_H$/;"	d
ExitButton	exitButton.cpp	/^	ExitButton::ExitButton(GameManager *gm, Vector2 pos, Vector2 size) : Button(gm,pos,size,"Exit",/;"	f	class:fsim::ExitButton
ExitButton	exitButton.h	/^	class ExitButton : public Button{$/;"	c	namespace:fsim
Faction	playerData.h	/^	enum Faction{CHINA,JAPAN,KOREA};$/;"	g	namespace:fsim
FactionButton	playButton.cpp	/^				FactionButton(GameManager *gm, Vector2 pos, Vector2 size, int faction,int &factionId):Button/;"	f	class:fsim::PlayButton::onClick::FactionButton	file:
FactionButton	playButton.cpp	/^		class FactionButton : public Button{$/;"	c	function:fsim::PlayButton::onClick	file:
GAME_MANAGER_H	gameManager.h	/^#define GAME_MANAGER_H$/;"	d
GUI_APP_STATE_H	guiAppState.h	/^#define GUI_APP_STATE_H$/;"	d
GUI_STATE	abstractAppState.h	/^			enum Type{GUI_STATE,IN_GAME_STATE};$/;"	e	enum:fsim::AbstractAppState::Type
GameManager	gameManager.cpp	/^	GameManager::GameManager(){$/;"	f	class:fsim::GameManager
GameManager	gameManager.h	/^	class GameManager{$/;"	c	namespace:fsim
GuiAppState	guiAppState.cpp	/^	GuiAppState::GuiAppState(GameManager *gm){$/;"	f	class:fsim::GuiAppState
GuiAppState	guiAppState.h	/^	class GuiAppState : public AbstractAppState{$/;"	c	namespace:fsim
INPUT_MANAGER_H	inputManager.h	/^#define INPUT_MANAGER_H$/;"	d
IN_GAME_APP_STATE_H	inGameAppState.h	/^#define IN_GAME_APP_STATE_H$/;"	d
IN_GAME_STATE	abstractAppState.h	/^			enum Type{GUI_STATE,IN_GAME_STATE};$/;"	e	enum:fsim::AbstractAppState::Type
InGameAppState	inGameAppState.cpp	/^	InGameAppState::InGameAppState(int faction){$/;"	f	class:fsim::InGameAppState
InGameAppState	inGameAppState.h	/^	class InGameAppState{$/;"	c	namespace:fsim
InputManager	inputManager.cpp	/^	InputManager::InputManager(StateManager *stateManager,GLFWwindow *window){$/;"	f	class:fsim::InputManager
InputManager	inputManager.h	/^	class InputManager{$/;"	c	namespace:fsim
JAPAN	playerData.h	/^	enum Faction{CHINA,JAPAN,KOREA};$/;"	e	enum:fsim::Faction
JOYSTICK	mapping.h	/^		enum Type{KEYBOARD,MOUSE,JOYSTICK};$/;"	e	enum:fsim::Mapping::Type
KEYBOARD	mapping.h	/^		enum Type{KEYBOARD,MOUSE,JOYSTICK};$/;"	e	enum:fsim::Mapping::Type
KOREA	playerData.h	/^	enum Faction{CHINA,JAPAN,KOREA};$/;"	e	enum:fsim::Faction
LISTBOX_H	listbox.h	/^#define LISTBOX_H$/;"	d
LOAD_BUTTON_H	loadButton.h	/^#define LOAD_BUTTON_H$/;"	d
Listbox	listbox.cpp	/^	Listbox::Listbox(GameManager *gm,Vector2 pos, Vector2 size, std::vector<string> &lines, int max/;"	f	class:fsim::Listbox
Listbox	listbox.h	/^	class Listbox{$/;"	c	namespace:fsim
ListboxButton	listbox.cpp	/^	Listbox::ListboxButton::ListboxButton(Listbox *l, GameManager *gm,Vector2 pos, Vector2 size, st/;"	f	class:fsim::Listbox::ListboxButton
ListboxButton	listbox.h	/^			class ListboxButton : public Button{$/;"	c	class:fsim::Listbox
LoadButton	loadButton.cpp	/^	LoadButton::LoadButton(GameManager *gm,Vector2 pos, Vector2 size):Button(gm,pos,size,"Load",tru/;"	f	class:fsim::LoadButton
LoadButton	loadButton.h	/^	class LoadButton : public Button{$/;"	c	namespace:fsim
MAPPING_H	mapping.h	/^#define MAPPING_H$/;"	d
MAP_H	map.h	/^#define MAP_H$/;"	d
MOUSE	mapping.h	/^		enum Type{KEYBOARD,MOUSE,JOYSTICK};$/;"	e	enum:fsim::Mapping::Type
MOUSE_CLICK	mapping.h	/^			MOUSE_CLICK,$/;"	e	enum:fsim::Mapping::Bind
Map	map.cpp	/^	Map::Map(string path){$/;"	f	class:fsim::Map
Map	map.h	/^	class Map{$/;"	c	namespace:fsim
Mapping	mapping.h	/^	struct Mapping{$/;"	s	namespace:fsim
OPTIONS_BUTTON_H	optionsButton.h	/^#define OPTIONS_BUTTON_H$/;"	d
OkButton	playButton.cpp	/^				OkButton(GameManager *gm,Vector2 pos, Vector2 size,Textbox *textbox,int &faction) : Button(g/;"	f	class:fsim::PlayButton::onClick::OkButton	file:
OkButton	playButton.cpp	/^		class OkButton : public Button{$/;"	c	function:fsim::PlayButton::onClick	file:
OptionsButton	optionsButton.cpp	/^	OptionsButton::OptionsButton(GameManager *gm,Vector2 pos, Vector2 size) : Button(gm,pos,size,"O/;"	f	class:fsim::OptionsButton
OptionsButton	optionsButton.h	/^	class OptionsButton : public Button{$/;"	c	namespace:fsim
PATH	defConfigs.h	/^	const static std::string PATH="\/home\/dominykas\/c++\/FSim\/Assets\/";$/;"	v	namespace:fsim	typeref:typename:const std::string
PLAYER_DATA_H	playerData.h	/^#define PLAYER_DATA_H$/;"	d
PLAY_BUTTON_H	playButton.h	/^#define PLAY_BUTTON_H$/;"	d
PlayButton	playButton.cpp	/^	PlayButton::PlayButton(GameManager *gm,Vector2 pos, Vector2 size):Button(gm,pos,size,"Play",tru/;"	f	class:fsim::PlayButton
PlayButton	playButton.h	/^	class PlayButton : public Button{$/;"	c	namespace:fsim
SHIFT	mapping.h	/^			SHIFT,$/;"	e	enum:fsim::Mapping::Bind
STATE_MANAGER_H	stateManager.h	/^#define STATE_MANAGER_H$/;"	d
ScrollingButton	listbox.cpp	/^	Listbox::ScrollingButton::ScrollingButton(GameManager *gm, Vector2 pos, Vector2 size, string na/;"	f	class:fsim::Listbox::ScrollingButton
ScrollingButton	listbox.h	/^			class ScrollingButton : public Button{$/;"	c	class:fsim::Listbox
StartButton	playButton.cpp	/^							StartButton(GameManager *gm,Vector2 pos, Vector2 size,int faction) : Button(gm,pos,size,"/;"	f	class:fsim::PlayButton::onClick::OkButton::onClick::StartButton	file:
StartButton	playButton.cpp	/^					class StartButton : public Button{$/;"	c	function:fsim::PlayButton::onClick::OkButton::onClick	file:
StateManager	stateManager.cpp	/^	StateManager::StateManager(){}$/;"	f	class:fsim::StateManager
StateManager	stateManager.h	/^	class StateManager{$/;"	c	namespace:fsim
TEXTBOX_H	textbox.h	/^#define TEXTBOX_H$/;"	d
Textbox	textbox.cpp	/^	Textbox::Textbox(GameManager *gm,Vector2 pos,Vector2 size,string entry){$/;"	f	class:fsim::Textbox
Textbox	textbox.h	/^	class Textbox{$/;"	c	namespace:fsim
TextboxButton	textbox.cpp	/^	Textbox::TextboxButton::TextboxButton(Textbox *t, GameManager *gm,Vector2 pos, Vector2 size, st/;"	f	class:fsim::Textbox::TextboxButton
TextboxButton	textbox.h	/^			class TextboxButton : public Button{$/;"	c	class:fsim::Textbox
Type	abstractAppState.h	/^			enum Type{GUI_STATE,IN_GAME_STATE};$/;"	g	class:fsim::AbstractAppState
Type	mapping.h	/^		enum Type{KEYBOARD,MOUSE,JOYSTICK};$/;"	g	struct:fsim::Mapping
UTILS_H	util.h	/^#define UTILS_H$/;"	d
UpgradeButton	playButton.cpp	/^										UpgradeButton(GameManager *gm, Vector2 pos, Vector2 size) : Button(gm,pos,size,"",true/;"	f	class:fsim::PlayButton::onClick::OkButton::onClick::AircraftTabButton::onClick::UpgradeButton	file:
UpgradeButton	playButton.cpp	/^								class UpgradeButton : public Button{$/;"	c	function:fsim::PlayButton::onClick::OkButton::onClick::AircraftTabButton::onClick	file:
action	mapping.h	/^		bool action,pressed=false;$/;"	m	struct:fsim::Mapping	typeref:typename:bool
addButton	guiAppState.cpp	/^	void GuiAppState::addButton(Button *b){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
addLine	listbox.cpp	/^	void Listbox::addLine(string line){$/;"	f	class:fsim::Listbox	typeref:typename:void
addListbox	guiAppState.cpp	/^	void GuiAppState::addListbox(Listbox *l){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
addTextbox	guiAppState.cpp	/^	void GuiAppState::addTextbox(Textbox *t){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
appStates	stateManager.h	/^			std::vector<AbstractAppState*> appStates;$/;"	m	class:fsim::StateManager	typeref:typename:std::vector<AbstractAppState * >
attachState	stateManager.cpp	/^	void StateManager::attachState(AbstractAppState *a){$/;"	f	class:fsim::StateManager	typeref:typename:void
attached	abstractAppState.h	/^			bool attached=false;$/;"	m	class:fsim::AbstractAppState	typeref:typename:bool
bind	mapping.h	/^		Bind bind;$/;"	m	struct:fsim::Mapping	typeref:typename:Bind
buttons	guiAppState.h	/^			std::vector<Button*> buttons;$/;"	m	class:fsim::GuiAppState	typeref:typename:std::vector<Button * >
canChangeCursor	textbox.h	/^			inline bool canChangeCursor(){return getTime()-lastBlinkTime>250;}$/;"	f	class:fsim::Textbox	typeref:typename:bool
canShowCursor	textbox.h	/^			bool enabled=false,canShowCursor=false,capitalLeters=false;$/;"	m	class:fsim::Textbox	typeref:typename:bool
canType	guiAppState.h	/^			bool canType(){return getTime()-lastTypeTime>100;}$/;"	f	class:fsim::GuiAppState	typeref:typename:bool
capitalLeters	textbox.h	/^			bool enabled=false,canShowCursor=false,capitalLeters=false;$/;"	m	class:fsim::Textbox	typeref:typename:bool
close	listbox.cpp	/^	void Listbox::close(){$/;"	f	class:fsim::Listbox	typeref:typename:void
color	button.h	/^			vb01::Vector4 color=vb01::Vector4(.6,.6,.6,1);$/;"	m	class:fsim::Button	typeref:typename:vb01::Vector4
cursorNode	textbox.h	/^			vb01::Node *guiNode,*textNode,*cursorNode;$/;"	m	class:fsim::Textbox	typeref:typename:vb01::Node ***
cursorPosOffset	textbox.h	/^			s64 lastBlinkTime, cursorPosOffset=0;$/;"	m	class:fsim::Textbox	typeref:typename:s64
cursorRect	textbox.h	/^			vb01::Quad *cursorRect;$/;"	m	class:fsim::Textbox	typeref:typename:vb01::Quad *
cursorWidth	textbox.h	/^			const int cursorWidth=5;$/;"	m	class:fsim::Textbox	typeref:typename:const int
deleteCharacter	textbox.cpp	/^	void Textbox::deleteCharacter(){$/;"	f	class:fsim::Textbox	typeref:typename:void
dettachState	stateManager.cpp	/^	void StateManager::dettachState(AbstractAppState *a){$/;"	f	class:fsim::StateManager	typeref:typename:void
dettachState	stateManager.cpp	/^	void StateManager::dettachState(AbstractAppState::Type type){$/;"	f	class:fsim::StateManager	typeref:typename:void
dettachState	stateManager.h	/^			inline void dettachState(int id){appStates.erase(appStates.begin()+id);}$/;"	f	class:fsim::StateManager	typeref:typename:void
disable	textbox.cpp	/^	void Textbox::disable(){$/;"	f	class:fsim::Textbox	typeref:typename:void
enable	textbox.cpp	/^	void Textbox::enable(){$/;"	f	class:fsim::Textbox	typeref:typename:void
enabled	textbox.h	/^			bool enabled=false,canShowCursor=false,capitalLeters=false;$/;"	m	class:fsim::Textbox	typeref:typename:bool
entry	textbox.h	/^			std::string entry="";$/;"	m	class:fsim::Textbox	typeref:typename:std::string
faction	inGameAppState.h	/^			Faction faction;$/;"	m	class:fsim::InGameAppState	typeref:typename:Faction
faction	playButton.cpp	/^							int faction;$/;"	m	class:fsim::PlayButton::onClick::OkButton::onClick::StartButton	typeref:typename:int	file:
faction	playButton.cpp	/^				int faction;$/;"	m	class:fsim::PlayButton::onClick::OkButton	typeref:typename:int	file:
faction	playButton.cpp	/^				int factionId,faction;$/;"	m	class:fsim::PlayButton::onClick::FactionButton	typeref:typename:int	file:
factionId	playButton.cpp	/^				int factionId,faction;$/;"	m	class:fsim::PlayButton::onClick::FactionButton	typeref:typename:int	file:
fsim	abstractAppState.cpp	/^namespace fsim{$/;"	n	file:
fsim	abstractAppState.h	/^namespace fsim{$/;"	n
fsim	button.cpp	/^namespace fsim{$/;"	n	file:
fsim	button.h	/^namespace fsim{$/;"	n
fsim	defConfigs.h	/^namespace fsim{$/;"	n
fsim	exitButton.cpp	/^namespace fsim{$/;"	n	file:
fsim	exitButton.h	/^namespace fsim{$/;"	n
fsim	gameManager.cpp	/^namespace fsim{$/;"	n	file:
fsim	gameManager.h	/^namespace fsim{$/;"	n
fsim	guiAppState.cpp	/^namespace fsim{$/;"	n	file:
fsim	guiAppState.h	/^namespace fsim{$/;"	n
fsim	inGameAppState.cpp	/^namespace fsim{$/;"	n	file:
fsim	inGameAppState.h	/^namespace fsim{$/;"	n
fsim	inputManager.cpp	/^namespace fsim{$/;"	n	file:
fsim	inputManager.h	/^namespace fsim{$/;"	n
fsim	listbox.cpp	/^namespace fsim{$/;"	n	file:
fsim	listbox.h	/^namespace fsim{$/;"	n
fsim	loadButton.cpp	/^namespace fsim{$/;"	n	file:
fsim	loadButton.h	/^namespace fsim{$/;"	n
fsim	map.cpp	/^namespace fsim{$/;"	n	file:
fsim	map.h	/^namespace fsim{$/;"	n
fsim	mapping.h	/^namespace fsim{$/;"	n
fsim	optionsButton.cpp	/^namespace fsim{$/;"	n	file:
fsim	optionsButton.h	/^namespace fsim{$/;"	n
fsim	playButton.cpp	/^namespace fsim{$/;"	n	file:
fsim	playButton.h	/^namespace fsim{$/;"	n
fsim	playerData.h	/^namespace fsim{$/;"	n
fsim	stateManager.cpp	/^namespace fsim{$/;"	n	file:
fsim	stateManager.h	/^namespace fsim{$/;"	n
fsim	textbox.cpp	/^namespace fsim{$/;"	n	file:
fsim	textbox.h	/^namespace fsim{$/;"	n
fsim	util.cpp	/^namespace fsim{$/;"	n	file:
fsim	util.h	/^namespace fsim{$/;"	n
getAppStates	stateManager.h	/^			inline std::vector<AbstractAppState*> getAppStates(){return appStates;}$/;"	f	class:fsim::StateManager	typeref:typename:std::vector<AbstractAppState * >
getButton	guiAppState.cpp	/^	Button* GuiAppState::getButton(string name){$/;"	f	class:fsim::GuiAppState	typeref:typename:Button *
getColor	button.h	/^			inline vb01::Vector4 getColor(){return color;}$/;"	f	class:fsim::Button	typeref:typename:vb01::Vector4
getContents	listbox.cpp	/^	std::vector<string> Listbox::getContents(){$/;"	f	class:fsim::Listbox	typeref:typename:std::vector<string>
getListboxButton	listbox.h	/^			inline ListboxButton* getListboxButton(){return listboxButton;}$/;"	f	class:fsim::Listbox	typeref:typename:ListboxButton *
getMapping	abstractAppState.h	/^			inline Mapping* getMapping(int id){return mappings[id];}$/;"	f	class:fsim::AbstractAppState	typeref:typename:Mapping *
getMappings	abstractAppState.h	/^			inline std::vector<Mapping*>& getMappings(){return mappings;}$/;"	f	class:fsim::AbstractAppState	typeref:typename:std::vector<Mapping * > &
getMaxDisplay	listbox.h	/^			inline int getMaxDisplay(){return maxDisplay;}$/;"	f	class:fsim::Listbox	typeref:typename:int
getMousePosX	listbox.h	/^			inline double* getMousePosX(){return mousePosX;}$/;"	f	class:fsim::Listbox	typeref:typename:double *
getMousePosY	listbox.h	/^			inline double* getMousePosY(){return mousePosY;}$/;"	f	class:fsim::Listbox	typeref:typename:double *
getName	button.h	/^			inline std::string getName(){return name;}$/;"	f	class:fsim::Button	typeref:typename:std::string
getNumAppStates	stateManager.h	/^			inline int getNumAppStates(){return appStates.size();}$/;"	f	class:fsim::StateManager	typeref:typename:int
getNumLines	listbox.h	/^			inline int getNumLines(){return lines.size();}$/;"	f	class:fsim::Listbox	typeref:typename:int
getNumMappings	abstractAppState.h	/^			inline int getNumMappings(){return mappings.size();}$/;"	f	class:fsim::AbstractAppState	typeref:typename:int
getPos	button.h	/^			inline vb01::Vector2 getPos(){return pos;}$/;"	f	class:fsim::Button	typeref:typename:vb01::Vector2
getPos	listbox.h	/^			inline vb01::Vector2 getPos(){return pos;} $/;"	f	class:fsim::Listbox	typeref:typename:vb01::Vector2
getRecDirs	util.cpp	/^        void getRecDirs(path p,std::vector<string> &list,bool showFiles, bool showDirs, bool rec/;"	f	namespace:fsim	typeref:typename:void
getRoot	gameManager.h	/^			inline vb01::Root* getRoot(){return root;}$/;"	f	class:fsim::GameManager	typeref:typename:vb01::Root *
getScrollingButton	listbox.h	/^			inline ScrollingButton* getScrollingButton(){return scrollingButton;}$/;"	f	class:fsim::Listbox	typeref:typename:ScrollingButton *
getSelectedOption	listbox.h	/^			inline int getSelectedOption(){return selectedOption;}$/;"	f	class:fsim::Listbox	typeref:typename:int
getSize	button.h	/^			inline vb01::Vector2 getSize(){return size;}$/;"	f	class:fsim::Button	typeref:typename:vb01::Vector2
getSize	listbox.h	/^			inline vb01::Vector2 getSize(){return size;} $/;"	f	class:fsim::Listbox	typeref:typename:vb01::Vector2
getState	stateManager.cpp	/^	AbstractAppState* StateManager::getState(AbstractAppState::Type type){$/;"	f	class:fsim::StateManager	typeref:typename:AbstractAppState *
getState	stateManager.h	/^			inline AbstractAppState* getState(int i){return appStates[i];}$/;"	f	class:fsim::StateManager	typeref:typename:AbstractAppState *
getStateManager	gameManager.h	/^			inline StateManager* getStateManager(){return stateManager;}$/;"	f	class:fsim::GameManager	typeref:typename:StateManager *
getText	textbox.h	/^			inline std::string getText(){return text->getText();}$/;"	f	class:fsim::Textbox	typeref:typename:std::string
getTextboxButton	textbox.h	/^			inline TextboxButton* getTextboxButton(){return textboxButton;}$/;"	f	class:fsim::Textbox	typeref:typename:TextboxButton *
getTime	util.h	/^	inline s64 getTime(){return (s64)(std::chrono::system_clock::now().time_since_epoch()\/std::chr/;"	f	namespace:fsim	typeref:typename:s64
getType	abstractAppState.h	/^			inline Type getType(){return type;}$/;"	f	class:fsim::AbstractAppState	typeref:typename:Type
gm	button.h	/^			GameManager *gm;$/;"	m	class:fsim::Button	typeref:typename:GameManager *
gm	exitButton.h	/^			GameManager *gm;$/;"	m	class:fsim::ExitButton	typeref:typename:GameManager *
gm	guiAppState.h	/^			GameManager *gm;$/;"	m	class:fsim::GuiAppState	typeref:typename:GameManager *
gm	listbox.h	/^			GameManager *gm;$/;"	m	class:fsim::Listbox	typeref:typename:GameManager *
guiNode	button.h	/^			vb01::Node *rectNode,*textNode=nullptr,*guiNode;$/;"	m	class:fsim::Button	typeref:typename:vb01::Node ***
guiNode	listbox.h	/^			vb01::Node *selRectNode,*guiNode;$/;"	m	class:fsim::Listbox	typeref:typename:vb01::Node **
guiNode	textbox.h	/^			vb01::Node *guiNode,*textNode,*cursorNode;$/;"	m	class:fsim::Textbox	typeref:typename:vb01::Node *
height	gameManager.h	/^			int width,height;$/;"	m	class:fsim::GameManager	typeref:typename:int
inputManager	gameManager.h	/^			InputManager *inputManager=nullptr;$/;"	m	class:fsim::GameManager	typeref:typename:InputManager *
isAttached	abstractAppState.h	/^			inline bool isAttached(){return attached;}$/;"	f	class:fsim::AbstractAppState	typeref:typename:bool
isEnabled	textbox.h	/^			inline bool isEnabled(){return enabled;}$/;"	f	class:fsim::Textbox	typeref:typename:bool
isOpen	listbox.h	/^			inline bool isOpen(){return open;}$/;"	f	class:fsim::Listbox	typeref:typename:bool
isRunning	gameManager.h	/^			inline bool isRunning(){return running;}$/;"	f	class:fsim::GameManager	typeref:typename:bool
isSeparate	button.h	/^			inline bool isSeparate(){return separate;}$/;"	f	class:fsim::Button	typeref:typename:bool
isSuchFile	util.cpp	/^	bool isSuchFile(boost::filesystem::path path){$/;"	f	namespace:fsim	typeref:typename:bool
lastBlinkTime	textbox.h	/^			s64 lastBlinkTime, cursorPosOffset=0;$/;"	m	class:fsim::Textbox	typeref:typename:s64
lastTypeTime	guiAppState.h	/^			s64 lastTypeTime=0;$/;"	m	class:fsim::GuiAppState	typeref:typename:s64
lines	listbox.h	/^			std::vector<vb01::Text*> lines;$/;"	m	class:fsim::Listbox	typeref:typename:std::vector<vb01::Text * >
listbox	listbox.h	/^					Listbox *listbox = nullptr;$/;"	m	class:fsim::Listbox::ListboxButton	typeref:typename:Listbox *
listboxButton	listbox.h	/^			ListboxButton *listboxButton;$/;"	m	class:fsim::Listbox	typeref:typename:ListboxButton *
listboxes	guiAppState.h	/^			std::vector<Listbox*> listboxes;$/;"	m	class:fsim::GuiAppState	typeref:typename:std::vector<Listbox * >
main	main.cpp	/^int main(){$/;"	f	typeref:typename:int
map	inGameAppState.h	/^			Map *map;$/;"	m	class:fsim::InGameAppState	typeref:typename:Map *
mappings	abstractAppState.h	/^			std::vector<Mapping*> mappings;$/;"	m	class:fsim::AbstractAppState	typeref:typename:std::vector<Mapping * >
maxDisplay	listbox.h	/^			int maxDisplay, scrollOffset = 0, selectedOption = 0;$/;"	m	class:fsim::Listbox	typeref:typename:int
models	map.h	/^			std::vector<vb01::Model*> models;$/;"	m	class:fsim::Map	typeref:typename:std::vector<vb01::Model * >
mousePosX	listbox.h	/^			double *mousePosX,*mousePosY;$/;"	m	class:fsim::Listbox	typeref:typename:double *
mousePosY	listbox.h	/^			double *mousePosX,*mousePosY;$/;"	m	class:fsim::Listbox	typeref:typename:double **
moveCursor	textbox.cpp	/^	void Textbox::moveCursor(bool left,float charWidth){$/;"	f	class:fsim::Textbox	typeref:typename:void
name	button.h	/^			std::string name;$/;"	m	class:fsim::Button	typeref:typename:std::string
numBinds	defConfigs.h	/^	const static int numStates=2,numBinds[numStates]{0,2};$/;"	v	namespace:fsim	typeref:typename:const int[]
numStates	defConfigs.h	/^	const static int numStates=2,numBinds[numStates]{0,2};$/;"	v	namespace:fsim	typeref:typename:const int
onAction	abstractAppState.h	/^			virtual void onAction(Mapping::Bind,bool){}$/;"	f	class:fsim::AbstractAppState	typeref:typename:void
onAction	guiAppState.cpp	/^	void GuiAppState::onAction(Mapping::Bind bind, bool isPressed){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
onAction	inGameAppState.cpp	/^	void InGameAppState::onAction(Mapping::Bind bind, bool isPressed){$/;"	f	class:fsim::InGameAppState	typeref:typename:void
onAnalog	abstractAppState.h	/^			virtual void onAnalog(Mapping::Bind,float){}$/;"	f	class:fsim::AbstractAppState	typeref:typename:void
onAnalog	inGameAppState.cpp	/^	void InGameAppState::onAnalog(Mapping::Bind bind, float str){$/;"	f	class:fsim::InGameAppState	typeref:typename:void
onAttached	abstractAppState.cpp	/^	void AbstractAppState::onAttached(){$/;"	f	class:fsim::AbstractAppState	typeref:typename:void
onAttached	guiAppState.cpp	/^	void GuiAppState::onAttached(){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
onAttached	inGameAppState.cpp	/^	void InGameAppState::onAttached(){}$/;"	f	class:fsim::InGameAppState	typeref:typename:void
onClick	button.h	/^			virtual void onClick(){}$/;"	f	class:fsim::Button	typeref:typename:void
onClick	exitButton.cpp	/^	void ExitButton::onClick(){gm->setRunning(false);}$/;"	f	class:fsim::ExitButton	typeref:typename:void
onClick	listbox.cpp	/^	void Listbox::ListboxButton::onClick(){$/;"	f	class:fsim::Listbox::ListboxButton	typeref:typename:void
onClick	listbox.cpp	/^	void Listbox::ScrollingButton::onClick(){}$/;"	f	class:fsim::Listbox::ScrollingButton	typeref:typename:void
onClick	loadButton.cpp	/^	void LoadButton::onClick(){}$/;"	f	class:fsim::LoadButton	typeref:typename:void
onClick	optionsButton.cpp	/^	void OptionsButton::onClick(){$/;"	f	class:fsim::OptionsButton	typeref:typename:void
onClick	playButton.cpp	/^										void onClick(){$/;"	f	class:fsim::PlayButton::onClick::OkButton::onClick::AircraftTabButton::onClick::UpgradeButton	typeref:typename:void	file:
onClick	playButton.cpp	/^							void onClick(){$/;"	f	class:fsim::PlayButton::onClick::OkButton::onClick::AircraftTabButton	typeref:typename:void	file:
onClick	playButton.cpp	/^							void onClick(){$/;"	f	class:fsim::PlayButton::onClick::OkButton::onClick::StartButton	typeref:typename:void	file:
onClick	playButton.cpp	/^				void onClick(){$/;"	f	class:fsim::PlayButton::onClick::OkButton	typeref:typename:void	file:
onClick	playButton.cpp	/^				void onClick(){factionId=faction;}$/;"	f	class:fsim::PlayButton::onClick::FactionButton	typeref:typename:void	file:
onClick	playButton.cpp	/^	void PlayButton::onClick(){$/;"	f	class:fsim::PlayButton	typeref:typename:void
onClick	textbox.cpp	/^	void Textbox::TextboxButton::onClick(){$/;"	f	class:fsim::Textbox::TextboxButton	typeref:typename:void
onDettached	abstractAppState.cpp	/^	void AbstractAppState::onDettached(){$/;"	f	class:fsim::AbstractAppState	typeref:typename:void
onDettached	guiAppState.cpp	/^	void GuiAppState::onDettached(){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
onDettached	inGameAppState.cpp	/^	void InGameAppState::onDettached(){}$/;"	f	class:fsim::InGameAppState	typeref:typename:void
onMouseOver	button.h	/^			virtual void onMouseOver(){}$/;"	f	class:fsim::Button	typeref:typename:void
onRawKeyButton	abstractAppState.h	/^			virtual void onRawKeyButton(char){}$/;"	f	class:fsim::AbstractAppState	typeref:typename:void
onRawKeyButton	guiAppState.cpp	/^	void GuiAppState::onRawKeyButton(char ch){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
onRawMouseButton	abstractAppState.h	/^			virtual void onRawMouseButton(char){}$/;"	f	class:fsim::AbstractAppState	typeref:typename:void
open	listbox.h	/^			bool open = false;$/;"	m	class:fsim::Listbox	typeref:typename:bool
openUp	listbox.cpp	/^	void Listbox::openUp(){$/;"	f	class:fsim::Listbox	typeref:typename:void
pos	button.h	/^			vb01::Vector2 pos,size;$/;"	m	class:fsim::Button	typeref:typename:vb01::Vector2
pos	listbox.h	/^			vb01::Vector2 pos, size;$/;"	m	class:fsim::Listbox	typeref:typename:vb01::Vector2
pos	textbox.h	/^			vb01::Vector2 pos, size;$/;"	m	class:fsim::Textbox	typeref:typename:vb01::Vector2
pressed	mapping.h	/^		bool action,pressed=false;$/;"	m	struct:fsim::Mapping	typeref:typename:bool
readFile	util.cpp	/^        void readFile(string path,std::vector<string> &lines,int firstLine,int lastLine) {$/;"	f	namespace:fsim	typeref:typename:void
rect	button.h	/^			vb01::Quad *rect;$/;"	m	class:fsim::Button	typeref:typename:vb01::Quad *
rectNode	button.h	/^			vb01::Node *rectNode,*textNode=nullptr,*guiNode;$/;"	m	class:fsim::Button	typeref:typename:vb01::Node *
removeAllButtons	guiAppState.cpp	/^	void GuiAppState::removeAllButtons(Button **exceptions){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
removeButton	guiAppState.cpp	/^	void GuiAppState::removeButton(Button *b){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
removeButton	guiAppState.cpp	/^	void GuiAppState::removeButton(string name){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
removeListbox	guiAppState.cpp	/^	void GuiAppState::removeListbox(Listbox *l){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
removeTextbox	guiAppState.cpp	/^	void GuiAppState::removeTextbox(Textbox *t){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
root	gameManager.h	/^			vb01::Root *root;$/;"	m	class:fsim::GameManager	typeref:typename:vb01::Root *
running	gameManager.h	/^			bool running=false;$/;"	m	class:fsim::GameManager	typeref:typename:bool
s16	util.h	/^	typedef short s16;$/;"	t	namespace:fsim	typeref:typename:short
s32	util.h	/^	typedef int s32;$/;"	t	namespace:fsim	typeref:typename:int
s64	util.h	/^	typedef long long s64;$/;"	t	namespace:fsim	typeref:typename:long long
s8	util.h	/^	typedef char s8;$/;"	t	namespace:fsim	typeref:typename:char
scrollDown	listbox.cpp	/^	void Listbox::scrollDown(){$/;"	f	class:fsim::Listbox	typeref:typename:void
scrollOffset	listbox.h	/^			int maxDisplay, scrollOffset = 0, selectedOption = 0;$/;"	m	class:fsim::Listbox	typeref:typename:int
scrollUp	listbox.cpp	/^	void Listbox::scrollUp(){$/;"	f	class:fsim::Listbox	typeref:typename:void
scrollingButton	listbox.h	/^			ScrollingButton *scrollingButton;$/;"	m	class:fsim::Listbox	typeref:typename:ScrollingButton *
selRectNode	listbox.h	/^			vb01::Node *selRectNode,*guiNode;$/;"	m	class:fsim::Listbox	typeref:typename:vb01::Node *
selectedOption	listbox.h	/^			int maxDisplay, scrollOffset = 0, selectedOption = 0;$/;"	m	class:fsim::Listbox	typeref:typename:int
separate	button.h	/^			bool separate;$/;"	m	class:fsim::Button	typeref:typename:bool
setColor	button.cpp	/^	void Button::setColor(Vector4 c){$/;"	f	class:fsim::Button	typeref:typename:void
setEntry	textbox.cpp	/^	void Textbox::setEntry(string entry){$/;"	f	class:fsim::Textbox	typeref:typename:void
setPos	button.cpp	/^	void Button::setPos(Vector2 pos){$/;"	f	class:fsim::Button	typeref:typename:void
setRunning	gameManager.h	/^			inline void setRunning(bool r){this->running=r;}$/;"	f	class:fsim::GameManager	typeref:typename:void
setSize	button.cpp	/^	void Button::setSize(Vector2 size){$/;"	f	class:fsim::Button	typeref:typename:void
setZOrder	button.cpp	/^	void Button::setZOrder(float zOrder){$/;"	f	class:fsim::Button	typeref:typename:void
shiftPressed	guiAppState.h	/^			bool shiftPressed=false;$/;"	m	class:fsim::GuiAppState	typeref:typename:bool
size	button.h	/^			vb01::Vector2 pos,size;$/;"	m	class:fsim::Button	typeref:typename:vb01::Vector2
size	listbox.h	/^			vb01::Vector2 pos, size;$/;"	m	class:fsim::Listbox	typeref:typename:vb01::Vector2
size	textbox.h	/^			vb01::Vector2 pos, size;$/;"	m	class:fsim::Textbox	typeref:typename:vb01::Vector2
stateManager	gameManager.h	/^			StateManager *stateManager=nullptr;$/;"	m	class:fsim::GameManager	typeref:typename:StateManager *
stateManager	inputManager.h	/^			StateManager *stateManager;$/;"	m	class:fsim::InputManager	typeref:typename:StateManager *
text	button.h	/^			vb01::Text *text=nullptr;$/;"	m	class:fsim::Button	typeref:typename:vb01::Text *
text	textbox.h	/^			vb01::Text *text;$/;"	m	class:fsim::Textbox	typeref:typename:vb01::Text *
textNode	button.h	/^			vb01::Node *rectNode,*textNode=nullptr,*guiNode;$/;"	m	class:fsim::Button	typeref:typename:vb01::Node **
textNode	textbox.h	/^			vb01::Node *guiNode,*textNode,*cursorNode;$/;"	m	class:fsim::Textbox	typeref:typename:vb01::Node **
textbox	playButton.cpp	/^				Textbox *textbox;$/;"	m	class:fsim::PlayButton::onClick::OkButton	typeref:typename:Textbox *	file:
textbox	textbox.h	/^					Textbox *textbox;$/;"	m	class:fsim::Textbox::TextboxButton	typeref:typename:Textbox *
textboxButton	textbox.h	/^			TextboxButton *textboxButton;$/;"	m	class:fsim::Textbox	typeref:typename:TextboxButton *
textboxes	guiAppState.h	/^			std::vector<Textbox*> textboxes;$/;"	m	class:fsim::GuiAppState	typeref:typename:std::vector<Textbox * >
trigger	mapping.h	/^		int trigger;$/;"	m	struct:fsim::Mapping	typeref:typename:int
type	abstractAppState.h	/^			Type type;$/;"	m	class:fsim::AbstractAppState	typeref:typename:Type
type	mapping.h	/^		Type type;$/;"	m	struct:fsim::Mapping	typeref:typename:Type
type	textbox.cpp	/^	void Textbox::type(char c, bool capitalLetters){$/;"	f	class:fsim::Textbox	typeref:typename:void
u16	util.h	/^	typedef unsigned short u16;$/;"	t	namespace:fsim	typeref:typename:unsigned short
u32	util.h	/^	typedef unsigned int u32;$/;"	t	namespace:fsim	typeref:typename:unsigned int
u64	util.h	/^	typedef unsigned long long u64;$/;"	t	namespace:fsim	typeref:typename:unsigned long long
u8	util.h	/^	typedef unsigned char u8;$/;"	t	namespace:fsim	typeref:typename:unsigned char
update	abstractAppState.cpp	/^	void AbstractAppState::update(){}$/;"	f	class:fsim::AbstractAppState	typeref:typename:void
update	button.cpp	/^	void Button::update(){}$/;"	f	class:fsim::Button	typeref:typename:void
update	gameManager.cpp	/^	void GameManager::update(){$/;"	f	class:fsim::GameManager	typeref:typename:void
update	guiAppState.cpp	/^	void GuiAppState::update(){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
update	inGameAppState.cpp	/^	void InGameAppState::update(){}$/;"	f	class:fsim::InGameAppState	typeref:typename:void
update	inputManager.cpp	/^	void InputManager::update(){$/;"	f	class:fsim::InputManager	typeref:typename:void
update	listbox.cpp	/^	void Listbox::update(){$/;"	f	class:fsim::Listbox	typeref:typename:void
update	map.cpp	/^	void Map::update(){}$/;"	f	class:fsim::Map	typeref:typename:void
update	stateManager.cpp	/^	void StateManager::update(){$/;"	f	class:fsim::StateManager	typeref:typename:void
update	textbox.cpp	/^	void Textbox::update(){$/;"	f	class:fsim::Textbox	typeref:typename:void
upgrades	playButton.cpp	/^							string upgrades[5];$/;"	m	class:fsim::PlayButton::onClick::OkButton::onClick::AircraftTabButton	typeref:typename:string[5]	file:
vb01	button.h	/^namespace vb01{$/;"	n
vb01	gameManager.h	/^namespace vb01{$/;"	n
vb01	listbox.h	/^namespace vb01{$/;"	n
vb01	map.h	/^namespace vb01{$/;"	n
vb01	textbox.h	/^namespace vb01{$/;"	n
width	gameManager.h	/^			int width,height;$/;"	m	class:fsim::GameManager	typeref:typename:int
window	inputManager.h	/^			GLFWwindow *window;$/;"	m	class:fsim::InputManager	typeref:typename:GLFWwindow *
writeFile	util.cpp	/^		void writeFile(string path,std::vector<string> &lines) {$/;"	f	namespace:fsim	typeref:typename:void
~AbstractAppState	abstractAppState.cpp	/^	AbstractAppState::~AbstractAppState(){}$/;"	f	class:fsim::AbstractAppState
~Button	button.cpp	/^	Button::~Button(){$/;"	f	class:fsim::Button
~GameManager	gameManager.cpp	/^	GameManager::~GameManager(){}$/;"	f	class:fsim::GameManager
~GuiAppState	guiAppState.cpp	/^	GuiAppState::~GuiAppState(){}$/;"	f	class:fsim::GuiAppState
~InGameAppState	inGameAppState.cpp	/^	InGameAppState::~InGameAppState(){}$/;"	f	class:fsim::InGameAppState
~InputManager	inputManager.cpp	/^	InputManager::~InputManager(){}$/;"	f	class:fsim::InputManager
~Listbox	listbox.cpp	/^	Listbox::~Listbox(){$/;"	f	class:fsim::Listbox
~Map	map.cpp	/^	Map::~Map(){}$/;"	f	class:fsim::Map
~StateManager	stateManager.cpp	/^	StateManager::~StateManager(){}$/;"	f	class:fsim::StateManager
~Textbox	textbox.cpp	/^	Textbox::~Textbox(){$/;"	f	class:fsim::Textbox
