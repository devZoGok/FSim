!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/3fdf28bc/
ABSTRACT_APP_STATE_H	abstractAppState.h	/^#define ABSTRACT_APP_STATE_H$/;"	d
ACTIVE_GAME_APP_STATE_H	activeGameAppState.h	/^#define ACTIVE_GAME_APP_STATE_H$/;"	d
AIRCRAFT_DATA_H	aircraftData.h	/^#define AIRCRAFT_DATA_H$/;"	d
AIRCRAFT_H	aircraft.h	/^#define AIRCRAFT_H$/;"	d
AbstractAppState	abstractAppState.cpp	/^	AbstractAppState::AbstractAppState(GameManager *gm){this->gm=gm;}$/;"	f	class:fsim::AbstractAppState
AbstractAppState	abstractAppState.h	/^	class AbstractAppState{$/;"	c	namespace:fsim
ActiveGameAppState	activeGameAppState.cpp	/^	ActiveGameAppState::ActiveGameAppState(GameManager *gm,int playerId) : AbstractAppState(gm){$/;"	f	class:fsim::ActiveGameAppState
ActiveGameAppState	activeGameAppState.h	/^	class ActiveGameAppState : public AbstractAppState{$/;"	c	namespace:fsim
Aircraft	aircraft.cpp	/^	Aircraft::Aircraft(GameManager *gm,int id, Vector3 pos, Quaternion rot) : Unit(gm,id,pos,rot){$/;"	f	class:fsim::Aircraft
Aircraft	aircraft.h	/^	class Aircraft : public Unit{$/;"	c	namespace:fsim
AircraftSelectionButton	playButton.cpp	/^										AircraftSelectionButton(GameManager *gm, Vector2 pos, Vector2 size, string name,int ai/;"	f	class:fsim::PlayButton::onClick::OkButton::onClick::StartButton::onClick::AircraftSelectionButton	file:
AircraftSelectionButton	playButton.cpp	/^								class AircraftSelectionButton : public Button{$/;"	c	function:fsim::PlayButton::onClick::OkButton::onClick::StartButton::onClick	file:
AircraftTabButton	playButton.cpp	/^							AircraftTabButton(GameManager *gm, Vector2 pos, Vector2 size, string name, string upgrade/;"	f	class:fsim::PlayButton::onClick::OkButton::onClick::AircraftTabButton	file:
AircraftTabButton	playButton.cpp	/^					class AircraftTabButton : public Button{$/;"	c	function:fsim::PlayButton::onClick::OkButton::onClick	file:
AuxTriggers	mapping.h	/^		enum AuxTriggers{MOUSE_AXIS_LEFT=310,MOUSE_AXIS_RIGHT=311,MOUSE_AXIS_UP=312,MOUSE_AXIS_DOWN=31/;"	g	struct:fsim::Mapping
BACKSPACE	mapping.h	/^			BACKSPACE,$/;"	e	enum:fsim::Mapping::Bind
BUILDING_H	building.h	/^#define BUILDING_H$/;"	d
BUTTON_H	button.h	/^#define BUTTON_H$/;"	d
BackButton	optionsButton.cpp	/^							BackButton(GameManager *gm,Vector2 pos,Vector2 size) : Button(gm,pos,size,"Back"){}$/;"	f	class:fsim::OptionsButton::onClick::TabButton::onClick::BackButton	file:
BackButton	optionsButton.cpp	/^					class BackButton : public Button{$/;"	c	function:fsim::OptionsButton::onClick::TabButton::onClick	file:
Bind	mapping.h	/^		enum Bind{$/;"	g	struct:fsim::Mapping
BindType	mapping.h	/^		enum BindType{KEYBOARD,MOUSE_KEY,MOUSE_AXIS,JOYSTICK_KEY,JOYSTICK_AXIS};$/;"	g	struct:fsim::Mapping
Building	building.cpp	/^	Building::Building(GameManager *gm,int id, Vector3 pos, Quaternion rot) : Structure(gm,id,pos,r/;"	f	class:fsim::Building
Building	building.h	/^	class Building : public Structure{$/;"	c	namespace:fsim
Button	button.cpp	/^	Button::Button(GameManager *gm, Vector2 pos, Vector2 size,string name,bool separate,string imag/;"	f	class:fsim::Button
Button	button.h	/^	class Button{$/;"	c	namespace:fsim
CHINA	playerData.h	/^	enum Faction{CHINA,JAPAN,KOREA};$/;"	e	enum:fsim::Faction
CONTROLS	listbox.h	/^			enum ListboxType{STOCK,CONTROLS};$/;"	e	enum:fsim::Listbox::ListboxType
ControlsTab	optionsButton.cpp	/^				ControlsTab(GameManager *gm) : TabButton(gm,Vector2(100,100),Vector2(100,20),"Controls"){}$/;"	f	class:fsim::OptionsButton::onClick::ControlsTab	file:
ControlsTab	optionsButton.cpp	/^		class ControlsTab : public TabButton{$/;"	c	function:fsim::OptionsButton::onClick	file:
DEFCONFIGS_H	defConfigs.h	/^#define DEFCONFIGS_H$/;"	d
DefaultsButton	optionsButton.cpp	/^				DefaultsButton(GameManager *gm, Vector2 pos, Vector2 size) : Button(gm,pos,size,"Restore def/;"	f	class:fsim::OptionsButton::onClick::DefaultsButton	file:
DefaultsButton	optionsButton.cpp	/^		class DefaultsButton : public Button{$/;"	c	function:fsim::OptionsButton::onClick	file:
EXIT_BUTTON_H	exitButton.h	/^#define EXIT_BUTTON_H$/;"	d
ExitButton	exitButton.cpp	/^	ExitButton::ExitButton(GameManager *gm, Vector2 pos, Vector2 size) : Button(gm,pos,size,"Exit",/;"	f	class:fsim::ExitButton
ExitButton	exitButton.h	/^	class ExitButton : public Button{$/;"	c	namespace:fsim
FIGHTER	structureData.h	/^		FIGHTER,$/;"	e	enum:fsim::Type
FIGHTER_BOMBER	structureData.h	/^		FIGHTER_BOMBER,$/;"	e	enum:fsim::Type
Faction	playerData.h	/^	enum Faction{CHINA,JAPAN,KOREA};$/;"	g	namespace:fsim
FactionButton	playButton.cpp	/^				FactionButton(GameManager *gm, Vector2 pos, Vector2 size, int faction,int &factionId):Button/;"	f	class:fsim::PlayButton::onClick::FactionButton	file:
FactionButton	playButton.cpp	/^		class FactionButton : public Button{$/;"	c	function:fsim::PlayButton::onClick	file:
GAME_MANAGER_H	gameManager.h	/^#define GAME_MANAGER_H$/;"	d
GUI_APP_STATE_H	guiAppState.h	/^#define GUI_APP_STATE_H$/;"	d
GUI_STATE	abstractAppState.h	/^			enum Type{GUI_STATE,IN_GAME_STATE,JET_STATE,HELICOPTER_STATE};$/;"	e	enum:fsim::AbstractAppState::Type
GameManager	gameManager.cpp	/^	GameManager::GameManager(){$/;"	f	class:fsim::GameManager
GameManager	gameManager.h	/^	class GameManager{$/;"	c	namespace:fsim
GuiAppState	guiAppState.cpp	/^	GuiAppState::GuiAppState(GameManager *gm) : AbstractAppState(gm){$/;"	f	class:fsim::GuiAppState
GuiAppState	guiAppState.h	/^	class GuiAppState : public AbstractAppState{$/;"	c	namespace:fsim
HELICOPTER	structureData.h	/^		HELICOPTER,$/;"	e	enum:fsim::Type
HELICOPTER_APP_STATE_H	helicopterAppState.h	/^#define HELICOPTER_APP_STATE_H$/;"	d
HELICOPTER_H	helicopter.h	/^#define HELICOPTER_H$/;"	d
HELICOPTER_STATE	abstractAppState.h	/^			enum Type{GUI_STATE,IN_GAME_STATE,JET_STATE,HELICOPTER_STATE};$/;"	e	enum:fsim::AbstractAppState::Type
Helicopter	helicopter.cpp	/^	Helicopter::Helicopter(GameManager *gm,int id, Vector3 pos, Quaternion rot) : Aircraft(gm,id,po/;"	f	class:fsim::Helicopter
Helicopter	helicopter.h	/^	class Helicopter : public Aircraft{$/;"	c	namespace:fsim
HelicopterAppState	helicopterAppState.cpp	/^	HelicopterAppState::HelicopterAppState(GameManager *gm, int playerId) : ActiveGameAppState(gm,p/;"	f	class:fsim::HelicopterAppState
HelicopterAppState	helicopterAppState.h	/^	class HelicopterAppState : public ActiveGameAppState{$/;"	c	namespace:fsim
INPUT_MANAGER_H	inputManager.h	/^#define INPUT_MANAGER_H$/;"	d
IN_GAME_APP_STATE_H	inGameAppState.h	/^#define IN_GAME_APP_STATE_H$/;"	d
IN_GAME_STATE	abstractAppState.h	/^			enum Type{GUI_STATE,IN_GAME_STATE,JET_STATE,HELICOPTER_STATE};$/;"	e	enum:fsim::AbstractAppState::Type
InGameAppState	inGameAppState.cpp	/^	InGameAppState::InGameAppState(GameManager *gm,int faction) : AbstractAppState(gm){$/;"	f	class:fsim::InGameAppState
InGameAppState	inGameAppState.h	/^	class InGameAppState : public AbstractAppState{$/;"	c	namespace:fsim
InputManager	inputManager.cpp	/^	InputManager::InputManager(GameManager *gm,GLFWwindow *window){$/;"	f	class:fsim::InputManager
InputManager	inputManager.h	/^	class InputManager{$/;"	c	namespace:fsim
JAPAN	playerData.h	/^	enum Faction{CHINA,JAPAN,KOREA};$/;"	e	enum:fsim::Faction
JET_APP_STATE_H	jetAppState.h	/^#define JET_APP_STATE_H$/;"	d
JET_H	jet.h	/^#define JET_H$/;"	d
JET_STATE	abstractAppState.h	/^			enum Type{GUI_STATE,IN_GAME_STATE,JET_STATE,HELICOPTER_STATE};$/;"	e	enum:fsim::AbstractAppState::Type
JOYSTICK_AXIS	mapping.h	/^		enum BindType{KEYBOARD,MOUSE_KEY,MOUSE_AXIS,JOYSTICK_KEY,JOYSTICK_AXIS};$/;"	e	enum:fsim::Mapping::BindType
JOYSTICK_KEY	mapping.h	/^		enum BindType{KEYBOARD,MOUSE_KEY,MOUSE_AXIS,JOYSTICK_KEY,JOYSTICK_AXIS};$/;"	e	enum:fsim::Mapping::BindType
Jet	jet.cpp	/^	Jet::Jet(GameManager *gm,int id, Vector3 pos, Quaternion rot) : Aircraft(gm,id,pos,rot){}$/;"	f	class:fsim::Jet
Jet	jet.h	/^	class Jet : public Aircraft{$/;"	c	namespace:fsim
JetAppState	jetAppState.cpp	/^	JetAppState::JetAppState(GameManager *gm, int playerId) : ActiveGameAppState(gm,playerId){$/;"	f	class:fsim::JetAppState
JetAppState	jetAppState.h	/^	class JetAppState : public ActiveGameAppState{$/;"	c	namespace:fsim
KEYBOARD	mapping.h	/^		enum BindType{KEYBOARD,MOUSE_KEY,MOUSE_AXIS,JOYSTICK_KEY,JOYSTICK_AXIS};$/;"	e	enum:fsim::Mapping::BindType
KOREA	playerData.h	/^	enum Faction{CHINA,JAPAN,KOREA};$/;"	e	enum:fsim::Faction
LAND	mapping.h	/^			LAND$/;"	e	enum:fsim::Mapping::Bind
LISTBOX_H	listbox.h	/^#define LISTBOX_H$/;"	d
LOAD_BUTTON_H	loadButton.h	/^#define LOAD_BUTTON_H$/;"	d
Listbox	listbox.cpp	/^	Listbox::Listbox(GameManager *gm,Vector2 pos, Vector2 size, std::vector<string> &lines, int max/;"	f	class:fsim::Listbox
Listbox	listbox.h	/^	class Listbox{$/;"	c	namespace:fsim
ListboxButton	listbox.cpp	/^	Listbox::ListboxButton::ListboxButton(Listbox *l, GameManager *gm,Vector2 pos, Vector2 size, st/;"	f	class:fsim::Listbox::ListboxButton
ListboxButton	listbox.h	/^			class ListboxButton : public Button{$/;"	c	class:fsim::Listbox
ListboxType	listbox.h	/^			enum ListboxType{STOCK,CONTROLS};$/;"	g	class:fsim::Listbox
LoadButton	loadButton.cpp	/^	LoadButton::LoadButton(GameManager *gm,Vector2 pos, Vector2 size):Button(gm,pos,size,"Load",tru/;"	f	class:fsim::LoadButton
LoadButton	loadButton.h	/^	class LoadButton : public Button{$/;"	c	namespace:fsim
MAIN_MENU	mapping.h	/^			MAIN_MENU,$/;"	e	enum:fsim::Mapping::Bind
MAIN_MENU_BUTTON_H	mainMenuButton.h	/^#define MAIN_MENU_BUTTON_H$/;"	d
MAPPING_H	mapping.h	/^#define MAPPING_H$/;"	d
MAP_H	map.h	/^#define MAP_H$/;"	d
MOUSE_AXIS	mapping.h	/^		enum BindType{KEYBOARD,MOUSE_KEY,MOUSE_AXIS,JOYSTICK_KEY,JOYSTICK_AXIS};$/;"	e	enum:fsim::Mapping::BindType
MOUSE_AXIS_DOWN	mapping.h	/^		enum AuxTriggers{MOUSE_AXIS_LEFT=310,MOUSE_AXIS_RIGHT=311,MOUSE_AXIS_UP=312,MOUSE_AXIS_DOWN=31/;"	e	enum:fsim::Mapping::AuxTriggers
MOUSE_AXIS_LEFT	mapping.h	/^		enum AuxTriggers{MOUSE_AXIS_LEFT=310,MOUSE_AXIS_RIGHT=311,MOUSE_AXIS_UP=312,MOUSE_AXIS_DOWN=31/;"	e	enum:fsim::Mapping::AuxTriggers
MOUSE_AXIS_RIGHT	mapping.h	/^		enum AuxTriggers{MOUSE_AXIS_LEFT=310,MOUSE_AXIS_RIGHT=311,MOUSE_AXIS_UP=312,MOUSE_AXIS_DOWN=31/;"	e	enum:fsim::Mapping::AuxTriggers
MOUSE_AXIS_UP	mapping.h	/^		enum AuxTriggers{MOUSE_AXIS_LEFT=310,MOUSE_AXIS_RIGHT=311,MOUSE_AXIS_UP=312,MOUSE_AXIS_DOWN=31/;"	e	enum:fsim::Mapping::AuxTriggers
MOUSE_CLICK	mapping.h	/^			MOUSE_CLICK,$/;"	e	enum:fsim::Mapping::Bind
MOUSE_KEY	mapping.h	/^		enum BindType{KEYBOARD,MOUSE_KEY,MOUSE_AXIS,JOYSTICK_KEY,JOYSTICK_AXIS};$/;"	e	enum:fsim::Mapping::BindType
MYSQLPP_MYSQL_HEADERS_BURIED	gameManager.cpp	/^#define MYSQLPP_MYSQL_HEADERS_BURIED$/;"	d	file:
MYSQLPP_MYSQL_HEADERS_BURIED	loadButton.cpp	/^#define MYSQLPP_MYSQL_HEADERS_BURIED$/;"	d	file:
MYSQLPP_MYSQL_HEADERS_BURIED	playButton.cpp	/^#define MYSQLPP_MYSQL_HEADERS_BURIED$/;"	d	file:
MainMenuButton	mainMenuButton.cpp	/^	MainMenuButton::MainMenuButton(GameManager *gm, Vector2 pos, Vector2 size) : Button(gm,pos,size/;"	f	class:fsim::MainMenuButton
MainMenuButton	mainMenuButton.h	/^	class MainMenuButton : public Button{$/;"	c	namespace:fsim
Map	map.cpp	/^	Map::Map(GameManager *gm,string path,InGameAppState *inGameState){$/;"	f	class:fsim::Map
Map	map.h	/^	class Map{$/;"	c	namespace:fsim
Mapping	mapping.h	/^	struct Mapping{$/;"	s	namespace:fsim
OPTIONS_BUTTON_H	optionsButton.h	/^#define OPTIONS_BUTTON_H$/;"	d
OkButton	optionsButton.cpp	/^				OkButton(GameManager *gm, Vector2 pos, Vector2 size) : Button(gm,pos,size,"OK"){}$/;"	f	class:fsim::OptionsButton::onClick::OkButton	file:
OkButton	optionsButton.cpp	/^		class OkButton : public Button{$/;"	c	function:fsim::OptionsButton::onClick	file:
OkButton	playButton.cpp	/^				OkButton(GameManager *gm,Vector2 pos, Vector2 size,Textbox *textbox,int &faction) : Button(g/;"	f	class:fsim::PlayButton::onClick::OkButton	file:
OkButton	playButton.cpp	/^		class OkButton : public Button{$/;"	c	function:fsim::PlayButton::onClick	file:
Options	gameManager.h	/^			struct Options{$/;"	s	class:fsim::GameManager
Options	optionsButton.cpp	/^		struct Options{$/;"	s	function:fsim::OptionsButton::onClick	file:
OptionsButton	optionsButton.cpp	/^	OptionsButton::OptionsButton(GameManager *gm,Vector2 pos, Vector2 size) : Button(gm,pos,size,"O/;"	f	class:fsim::OptionsButton
OptionsButton	optionsButton.h	/^	class OptionsButton : public Button{$/;"	c	namespace:fsim
PATH	defConfigs.h	/^	const static std::string PATH="..\/Assets\/",defaultTexture=PATH+"Textures\/defaultTexture.jpg"/;"	v	namespace:fsim	typeref:typename:const std::string
PAUSE	mapping.h	/^			PAUSE,$/;"	e	enum:fsim::Mapping::Bind
PITCH_DOWN	mapping.h	/^			PITCH_DOWN,$/;"	e	enum:fsim::Mapping::Bind
PITCH_HELICOPTER_DOWN	mapping.h	/^			PITCH_HELICOPTER_DOWN,$/;"	e	enum:fsim::Mapping::Bind
PITCH_HELICOPTER_UP	mapping.h	/^			PITCH_HELICOPTER_UP,$/;"	e	enum:fsim::Mapping::Bind
PITCH_UP	mapping.h	/^			PITCH_UP,$/;"	e	enum:fsim::Mapping::Bind
PLAYER_DATA_H	playerData.h	/^#define PLAYER_DATA_H$/;"	d
PLAY_BUTTON_H	playButton.h	/^#define PLAY_BUTTON_H$/;"	d
PlayButton	playButton.cpp	/^	PlayButton::PlayButton(GameManager *gm,Vector2 pos, Vector2 size):Button(gm,pos,size,"Play",tru/;"	f	class:fsim::PlayButton
PlayButton	playButton.h	/^	class PlayButton : public Button{$/;"	c	namespace:fsim
RISE	mapping.h	/^			RISE,$/;"	e	enum:fsim::Mapping::Bind
ROLL_HELICOPTER_LEFT	mapping.h	/^			ROLL_HELICOPTER_LEFT,$/;"	e	enum:fsim::Mapping::Bind
ROLL_HELICOPTER_RIGHT	mapping.h	/^			ROLL_HELICOPTER_RIGHT,$/;"	e	enum:fsim::Mapping::Bind
ROLL_LEFT	mapping.h	/^			ROLL_LEFT,$/;"	e	enum:fsim::Mapping::Bind
ROLL_RIGHT	mapping.h	/^			ROLL_RIGHT,$/;"	e	enum:fsim::Mapping::Bind
SAM_SITE	structureData.h	/^		SAM_SITE$/;"	e	enum:fsim::Type
SHIFT	mapping.h	/^			SHIFT,$/;"	e	enum:fsim::Mapping::Bind
STATE_MANAGER_H	stateManager.h	/^#define STATE_MANAGER_H$/;"	d
STOCK	listbox.h	/^			enum ListboxType{STOCK,CONTROLS};$/;"	e	enum:fsim::Listbox::ListboxType
STRUCTURE_DATA_H	structureData.h	/^#define STRUCTURE_DATA_H$/;"	d
STRUCTURE_H	structure.h	/^#define STRUCTURE_H$/;"	d
ScrollingButton	listbox.cpp	/^	Listbox::ScrollingButton::ScrollingButton(GameManager *gm, Vector2 pos, Vector2 size, string na/;"	f	class:fsim::Listbox::ScrollingButton
ScrollingButton	listbox.h	/^			class ScrollingButton : public Button{$/;"	c	class:fsim::Listbox
StartButton	playButton.cpp	/^							StartButton(GameManager *gm, Vector2 pos, Vector2 size, AircraftTabButton *tabs[3], int f/;"	f	class:fsim::PlayButton::onClick::OkButton::onClick::StartButton	file:
StartButton	playButton.cpp	/^					class StartButton : public Button{$/;"	c	function:fsim::PlayButton::onClick::OkButton::onClick	file:
StateManager	stateManager.cpp	/^	StateManager::StateManager(){}$/;"	f	class:fsim::StateManager
StateManager	stateManager.h	/^	class StateManager{$/;"	c	namespace:fsim
Structure	structure.cpp	/^	Structure::Structure(GameManager *gm,int id, Vector3 pos, Quaternion rot){$/;"	f	class:fsim::Structure
Structure	structure.h	/^	class Structure{$/;"	c	namespace:fsim
TEXTBOX_H	textbox.h	/^#define TEXTBOX_H$/;"	d
TabButton	optionsButton.cpp	/^				TabButton(GameManager *gm, Vector2 pos, Vector2 size, string name) : Button(gm,pos,size,name/;"	f	class:fsim::OptionsButton::onClick::TabButton	file:
TabButton	optionsButton.cpp	/^		class TabButton : public Button{$/;"	c	function:fsim::OptionsButton::onClick	file:
Textbox	textbox.cpp	/^	Textbox::Textbox(GameManager *gm,Vector2 pos,Vector2 size,string entry){$/;"	f	class:fsim::Textbox
Textbox	textbox.h	/^	class Textbox{$/;"	c	namespace:fsim
TextboxButton	textbox.cpp	/^	Textbox::TextboxButton::TextboxButton(Textbox *t, GameManager *gm,Vector2 pos, Vector2 size, st/;"	f	class:fsim::Textbox::TextboxButton
TextboxButton	textbox.h	/^			class TextboxButton : public Button{$/;"	c	class:fsim::Textbox
Type	abstractAppState.h	/^			enum Type{GUI_STATE,IN_GAME_STATE,JET_STATE,HELICOPTER_STATE};$/;"	g	class:fsim::AbstractAppState
Type	structureData.h	/^	enum Type{$/;"	g	namespace:fsim
UNIT_H	unit.h	/^#define UNIT_H$/;"	d
UTILS_H	util.h	/^#define UTILS_H$/;"	d
Unit	unit.cpp	/^	Unit::Unit(GameManager *gm,int id, Vector3 pos, Quaternion rot) : Structure(gm,id,pos,rot){$/;"	f	class:fsim::Unit
Unit	unit.h	/^	class Unit : public Structure{$/;"	c	namespace:fsim
UpgradeButton	playButton.cpp	/^									UpgradeButton(GameManager *gm, Vector2 pos, Vector2 size) : Button(gm,pos,size,"",true,/;"	f	class:fsim::PlayButton::onClick::OkButton::onClick::AircraftTabButton::UpgradeButton	file:
UpgradeButton	playButton.cpp	/^							class UpgradeButton : public Button{$/;"	c	class:fsim::PlayButton::onClick::OkButton::onClick::AircraftTabButton	file:
YAW_HELICOPTER_LEFT	mapping.h	/^			YAW_HELICOPTER_LEFT,$/;"	e	enum:fsim::Mapping::Bind
YAW_HELICOPTER_RIGHT	mapping.h	/^			YAW_HELICOPTER_RIGHT,$/;"	e	enum:fsim::Mapping::Bind
YAW_LEFT	mapping.h	/^			YAW_LEFT,$/;"	e	enum:fsim::Mapping::Bind
YAW_RIGHT	mapping.h	/^			YAW_RIGHT,$/;"	e	enum:fsim::Mapping::Bind
accIncrement	activeGameAppState.h	/^			float accIncrement=.01,deccIncrement=.01,yawIncrement=.01,rollIncrement=.01,pitchIncrement=.0/;"	m	class:fsim::ActiveGameAppState	typeref:typename:float
action	mapping.h	/^		bool action,pressed=false;$/;"	m	struct:fsim::Mapping	typeref:typename:bool
active	button.h	/^			bool separate,active=true;$/;"	m	class:fsim::Button	typeref:typename:bool
addButton	guiAppState.cpp	/^	void GuiAppState::addButton(Button *b){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
addLine	listbox.cpp	/^	void Listbox::addLine(string line){$/;"	f	class:fsim::Listbox	typeref:typename:void
addListbox	guiAppState.cpp	/^	void GuiAppState::addListbox(Listbox *l){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
addStructure	inGameAppState.h	/^			inline void addStructure(Structure *s){structures.push_back(s);}$/;"	f	class:fsim::InGameAppState	typeref:typename:void
addTextbox	guiAppState.cpp	/^	void GuiAppState::addTextbox(Textbox *t){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
aircraft	activeGameAppState.h	/^			Aircraft *aircraft;$/;"	m	class:fsim::ActiveGameAppState	typeref:typename:Aircraft *
aircraftId	playButton.cpp	/^										int aircraftId;$/;"	m	class:fsim::PlayButton::onClick::OkButton::onClick::StartButton::onClick::AircraftSelectionButton	typeref:typename:int	file:
appStates	stateManager.h	/^			std::vector<AbstractAppState*> appStates;$/;"	m	class:fsim::StateManager	typeref:typename:std::vector<AbstractAppState * >
attachState	stateManager.cpp	/^	void StateManager::attachState(AbstractAppState *a){$/;"	f	class:fsim::StateManager	typeref:typename:void
attached	abstractAppState.h	/^			bool attached=false;$/;"	m	class:fsim::AbstractAppState	typeref:typename:bool
backPitch	activeGameAppState.h	/^			bool forwPitch=false,backPitch=false,leftRoll=false,rightRoll=false;$/;"	m	class:fsim::ActiveGameAppState	typeref:typename:bool
bind	mapping.h	/^		Bind bind;$/;"	m	struct:fsim::Mapping	typeref:typename:Bind
buttons	guiAppState.h	/^			std::vector<Button*> buttons;$/;"	m	class:fsim::GuiAppState	typeref:typename:std::vector<Button * >
cam	aircraft.h	/^			vb01::Camera *cam=nullptr;$/;"	m	class:fsim::Aircraft	typeref:typename:vb01::Camera *
canChangeCursor	textbox.h	/^			inline bool canChangeCursor(){return getTime()-lastBlinkTime>250;}$/;"	f	class:fsim::Textbox	typeref:typename:bool
canShowCursor	textbox.h	/^			bool enabled=false,canShowCursor=false,capitalLeters=false;$/;"	m	class:fsim::Textbox	typeref:typename:bool
canType	guiAppState.h	/^			bool canType(){return getTime()-lastTypeTime>100;}$/;"	f	class:fsim::GuiAppState	typeref:typename:bool
capitalLeters	textbox.h	/^			bool enabled=false,canShowCursor=false,capitalLeters=false;$/;"	m	class:fsim::Textbox	typeref:typename:bool
changeLine	listbox.cpp	/^	void Listbox::changeLine(int id, string change){$/;"	f	class:fsim::Listbox	typeref:typename:void
close	listbox.cpp	/^	void Listbox::close(){$/;"	f	class:fsim::Listbox	typeref:typename:void
color	button.h	/^			vb01::Vector4 color=vb01::Vector4(.6,.6,.6,1);$/;"	m	class:fsim::Button	typeref:typename:vb01::Vector4
convert	listbox.cpp	/^	string Listbox::convert(string str){$/;"	f	class:fsim::Listbox	typeref:typename:string
cursorNode	textbox.h	/^			vb01::Node *guiNode,*textNode,*cursorNode;$/;"	m	class:fsim::Textbox	typeref:typename:vb01::Node ***
cursorPosOffset	textbox.h	/^			s64 lastBlinkTime, cursorPosOffset=0;$/;"	m	class:fsim::Textbox	typeref:typename:s64
cursorRect	textbox.h	/^			vb01::Quad *cursorRect;$/;"	m	class:fsim::Textbox	typeref:typename:vb01::Quad *
cursorWidth	textbox.h	/^			const int cursorWidth=5;$/;"	m	class:fsim::Textbox	typeref:typename:const int
databaseUser	gameManager.h	/^				std::string databaseUser;$/;"	m	struct:fsim::GameManager::Options	typeref:typename:std::string
deccIncrement	activeGameAppState.h	/^			float accIncrement=.01,deccIncrement=.01,yawIncrement=.01,rollIncrement=.01,pitchIncrement=.0/;"	m	class:fsim::ActiveGameAppState	typeref:typename:float
defaultTexture	defConfigs.h	/^	const static std::string PATH="..\/Assets\/",defaultTexture=PATH+"Textures\/defaultTexture.jpg"/;"	v	namespace:fsim	typeref:typename:const std::string
defaultsButton	optionsButton.cpp	/^				DefaultsButton *defaultsButton;$/;"	m	class:fsim::OptionsButton::onClick::TabButton	typeref:typename:DefaultsButton *	file:
deleteCharacter	textbox.cpp	/^	void Textbox::deleteCharacter(){$/;"	f	class:fsim::Textbox	typeref:typename:void
dettachState	stateManager.cpp	/^	void StateManager::dettachState(AbstractAppState *a){$/;"	f	class:fsim::StateManager	typeref:typename:void
dettachState	stateManager.cpp	/^	void StateManager::dettachState(AbstractAppState::Type type){$/;"	f	class:fsim::StateManager	typeref:typename:void
dettachState	stateManager.h	/^			inline void dettachState(int id){appStates.erase(appStates.begin()+id);}$/;"	f	class:fsim::StateManager	typeref:typename:void
dir	structure.h	/^			vb01::Vector3 pos,dir=vb01::Vector3(0,0,-1),left=vb01::Vector3(1,0,0),up=vb01::Vector3(0,1,0)/;"	m	class:fsim::Structure	typeref:typename:vb01::Vector3
disable	textbox.cpp	/^	void Textbox::disable(){$/;"	f	class:fsim::Textbox	typeref:typename:void
enable	textbox.cpp	/^	void Textbox::enable(){$/;"	f	class:fsim::Textbox	typeref:typename:void
enabled	textbox.h	/^			bool enabled=false,canShowCursor=false,capitalLeters=false;$/;"	m	class:fsim::Textbox	typeref:typename:bool
entry	textbox.h	/^			std::string entry="";$/;"	m	class:fsim::Textbox	typeref:typename:std::string
faction	inGameAppState.h	/^			Faction faction;$/;"	m	class:fsim::InGameAppState	typeref:typename:Faction
faction	playButton.cpp	/^							int faction;$/;"	m	class:fsim::PlayButton::onClick::OkButton::onClick::StartButton	typeref:typename:int	file:
faction	playButton.cpp	/^				int faction;$/;"	m	class:fsim::PlayButton::onClick::OkButton	typeref:typename:int	file:
faction	playButton.cpp	/^				int factionId,faction;$/;"	m	class:fsim::PlayButton::onClick::FactionButton	typeref:typename:int	file:
factionId	playButton.cpp	/^				int factionId,faction;$/;"	m	class:fsim::PlayButton::onClick::FactionButton	typeref:typename:int	file:
foo	inputManager.cpp	/^	void foo(GLFWwindow *window,double newPosX,double newPosY){$/;"	f	namespace:fsim	typeref:typename:void
forwPitch	activeGameAppState.h	/^			bool forwPitch=false,backPitch=false,leftRoll=false,rightRoll=false;$/;"	m	class:fsim::ActiveGameAppState	typeref:typename:bool
fromIntToString	util.cpp	/^	string fromIntToString(int data[3]){$/;"	f	namespace:fsim	typeref:typename:string
fromStringToInt	util.cpp	/^	int* fromStringToInt(string data){$/;"	f	namespace:fsim	typeref:typename:int *
fsim	abstractAppState.cpp	/^namespace fsim{$/;"	n	file:
fsim	abstractAppState.h	/^namespace fsim{$/;"	n
fsim	activeGameAppState.cpp	/^namespace fsim{$/;"	n	file:
fsim	activeGameAppState.h	/^namespace fsim{$/;"	n
fsim	aircraft.cpp	/^namespace fsim{$/;"	n	file:
fsim	aircraft.h	/^namespace fsim{$/;"	n
fsim	aircraftData.h	/^namespace fsim{$/;"	n
fsim	building.cpp	/^namespace fsim{$/;"	n	file:
fsim	building.h	/^namespace fsim{$/;"	n
fsim	button.cpp	/^namespace fsim{$/;"	n	file:
fsim	button.h	/^namespace fsim{$/;"	n
fsim	defConfigs.h	/^namespace fsim{$/;"	n
fsim	exitButton.cpp	/^namespace fsim{$/;"	n	file:
fsim	exitButton.h	/^namespace fsim{$/;"	n
fsim	gameManager.cpp	/^namespace fsim{$/;"	n	file:
fsim	gameManager.h	/^namespace fsim{$/;"	n
fsim	guiAppState.cpp	/^namespace fsim{$/;"	n	file:
fsim	guiAppState.h	/^namespace fsim{$/;"	n
fsim	helicopter.cpp	/^namespace fsim{$/;"	n	file:
fsim	helicopter.h	/^namespace fsim{$/;"	n
fsim	helicopterAppState.cpp	/^namespace fsim{$/;"	n	file:
fsim	helicopterAppState.h	/^namespace fsim{$/;"	n
fsim	inGameAppState.cpp	/^namespace fsim{$/;"	n	file:
fsim	inGameAppState.h	/^namespace fsim{$/;"	n
fsim	inputManager.cpp	/^namespace fsim{$/;"	n	file:
fsim	inputManager.h	/^namespace fsim{$/;"	n
fsim	jet.cpp	/^namespace fsim{$/;"	n	file:
fsim	jet.h	/^namespace fsim{$/;"	n
fsim	jetAppState.cpp	/^namespace fsim{$/;"	n	file:
fsim	jetAppState.h	/^namespace fsim{$/;"	n
fsim	listbox.cpp	/^namespace fsim{$/;"	n	file:
fsim	listbox.h	/^namespace fsim{$/;"	n
fsim	loadButton.cpp	/^namespace fsim{$/;"	n	file:
fsim	loadButton.h	/^namespace fsim{$/;"	n
fsim	mainMenuButton.cpp	/^namespace fsim{$/;"	n	file:
fsim	mainMenuButton.h	/^namespace fsim{$/;"	n
fsim	map.cpp	/^namespace fsim{$/;"	n	file:
fsim	map.h	/^namespace fsim{$/;"	n
fsim	mapping.h	/^namespace fsim{$/;"	n
fsim	optionsButton.cpp	/^namespace fsim{$/;"	n	file:
fsim	optionsButton.h	/^namespace fsim{$/;"	n
fsim	playButton.cpp	/^namespace fsim{$/;"	n	file:
fsim	playButton.h	/^namespace fsim{$/;"	n
fsim	playerData.h	/^namespace fsim{$/;"	n
fsim	stateManager.cpp	/^namespace fsim{$/;"	n	file:
fsim	stateManager.h	/^namespace fsim{$/;"	n
fsim	structure.cpp	/^namespace fsim{$/;"	n	file:
fsim	structure.h	/^namespace fsim{$/;"	n
fsim	structureData.h	/^namespace fsim{$/;"	n
fsim	textbox.cpp	/^namespace fsim{$/;"	n	file:
fsim	textbox.h	/^namespace fsim{$/;"	n
fsim	unit.cpp	/^namespace fsim{$/;"	n	file:
fsim	unit.h	/^namespace fsim{$/;"	n
fsim	util.cpp	/^namespace fsim{$/;"	n	file:
fsim	util.h	/^namespace fsim{$/;"	n
getAppStates	stateManager.h	/^			inline std::vector<AbstractAppState*> getAppStates(){return appStates;}$/;"	f	class:fsim::StateManager	typeref:typename:std::vector<AbstractAppState * >
getButton	guiAppState.cpp	/^	Button* GuiAppState::getButton(string name){$/;"	f	class:fsim::GuiAppState	typeref:typename:Button *
getColor	button.h	/^			inline vb01::Vector4 getColor(){return color;}$/;"	f	class:fsim::Button	typeref:typename:vb01::Vector4
getContents	listbox.cpp	/^	std::vector<string> Listbox::getContents(){$/;"	f	class:fsim::Listbox	typeref:typename:std::vector<string>
getCoords	map.cpp	/^	void Map::getCoords(string line, string &type, float *coords,const int numCoords){$/;"	f	class:fsim::Map	typeref:typename:void
getHeight	gameManager.h	/^			inline int getHeight(){return height;}$/;"	f	class:fsim::GameManager	typeref:typename:int
getId	structure.h	/^			inline int getId(){return id;}$/;"	f	class:fsim::Structure	typeref:typename:int
getLanding	helicopter.h	/^			inline float getLanding(){return landing;}$/;"	f	class:fsim::Helicopter	typeref:typename:float
getLandingSpeed	helicopter.h	/^			inline float getLandingSpeed(){return landingSpeed;}$/;"	f	class:fsim::Helicopter	typeref:typename:float
getListboxButton	listbox.h	/^			inline ListboxButton* getListboxButton(){return listboxButton;}$/;"	f	class:fsim::Listbox	typeref:typename:ListboxButton *
getMapping	abstractAppState.h	/^			inline Mapping* getMapping(int id){return mappings[id];}$/;"	f	class:fsim::AbstractAppState	typeref:typename:Mapping *
getMappings	abstractAppState.h	/^			inline std::vector<Mapping*>& getMappings(){return mappings;}$/;"	f	class:fsim::AbstractAppState	typeref:typename:std::vector<Mapping * > &
getMaxDisplay	listbox.h	/^			inline int getMaxDisplay(){return maxDisplay;}$/;"	f	class:fsim::Listbox	typeref:typename:int
getMousePosX	listbox.h	/^			inline double* getMousePosX(){return mousePosX;}$/;"	f	class:fsim::Listbox	typeref:typename:double *
getMousePosY	listbox.h	/^			inline double* getMousePosY(){return mousePosY;}$/;"	f	class:fsim::Listbox	typeref:typename:double *
getName	button.h	/^			inline std::string getName(){return name;}$/;"	f	class:fsim::Button	typeref:typename:std::string
getNumAppStates	stateManager.h	/^			inline int getNumAppStates(){return appStates.size();}$/;"	f	class:fsim::StateManager	typeref:typename:int
getNumLines	listbox.h	/^			inline int getNumLines(){return lines.size();}$/;"	f	class:fsim::Listbox	typeref:typename:int
getNumMappings	abstractAppState.h	/^			inline int getNumMappings(){return mappings.size();}$/;"	f	class:fsim::AbstractAppState	typeref:typename:int
getNumStructures	inGameAppState.h	/^			inline int getNumStructures(){return structures.size();}$/;"	f	class:fsim::InGameAppState	typeref:typename:int
getOptions	gameManager.h	/^			inline Options& getOptions(){return options;}$/;"	f	class:fsim::GameManager	typeref:typename:Options &
getPitch	aircraft.h	/^			inline float getPitch(){return pitchVal;}$/;"	f	class:fsim::Aircraft	typeref:typename:float
getPitchSpeed	aircraft.h	/^			inline float getPitchSpeed(){return pitchSpeed;}$/;"	f	class:fsim::Aircraft	typeref:typename:float
getPos	button.h	/^			inline vb01::Vector2 getPos(){return pos;}$/;"	f	class:fsim::Button	typeref:typename:vb01::Vector2
getPos	listbox.h	/^			inline vb01::Vector2 getPos(){return pos;} $/;"	f	class:fsim::Listbox	typeref:typename:vb01::Vector2
getPos	structure.h	/^			inline vb01::Vector3 getPos(){return pos;}$/;"	f	class:fsim::Structure	typeref:typename:vb01::Vector3
getRecDirs	util.cpp	/^	void getRecDirs(path p,std::vector<string> &list,bool showFiles, bool showDirs, bool rec){$/;"	f	namespace:fsim	typeref:typename:void
getRising	helicopter.h	/^			inline float getRising(){return rising;}$/;"	f	class:fsim::Helicopter	typeref:typename:float
getRisingSpeed	helicopter.h	/^			inline float getRisingSpeed(){return risingSpeed;}$/;"	f	class:fsim::Helicopter	typeref:typename:float
getRoll	aircraft.h	/^			inline float getRoll(){return rollVal;}$/;"	f	class:fsim::Aircraft	typeref:typename:float
getRollSpeed	aircraft.h	/^			inline float getRollSpeed(){return rollSpeed;}$/;"	f	class:fsim::Aircraft	typeref:typename:float
getRoot	gameManager.h	/^			inline vb01::Root* getRoot(){return root;}$/;"	f	class:fsim::GameManager	typeref:typename:vb01::Root *
getScrollingButton	listbox.h	/^			inline ScrollingButton* getScrollingButton(){return scrollingButton;}$/;"	f	class:fsim::Listbox	typeref:typename:ScrollingButton *
getSelectedOption	listbox.h	/^			inline int getSelectedOption(){return selectedOption;}$/;"	f	class:fsim::Listbox	typeref:typename:int
getSize	button.h	/^			inline vb01::Vector2 getSize(){return size;}$/;"	f	class:fsim::Button	typeref:typename:vb01::Vector2
getSize	listbox.h	/^			inline vb01::Vector2 getSize(){return size;} $/;"	f	class:fsim::Listbox	typeref:typename:vb01::Vector2
getState	stateManager.cpp	/^	AbstractAppState* StateManager::getState(AbstractAppState::Type type){$/;"	f	class:fsim::StateManager	typeref:typename:AbstractAppState *
getState	stateManager.h	/^			inline AbstractAppState* getState(int i){return appStates[i];}$/;"	f	class:fsim::StateManager	typeref:typename:AbstractAppState *
getStateManager	gameManager.h	/^			inline StateManager* getStateManager(){return stateManager;}$/;"	f	class:fsim::GameManager	typeref:typename:StateManager *
getStructures	inGameAppState.h	/^			std::vector<Structure*>& getStructures(){return structures;}$/;"	f	class:fsim::InGameAppState	typeref:typename:std::vector<Structure * > &
getText	textbox.h	/^			inline std::string getText(){return text->getText();}$/;"	f	class:fsim::Textbox	typeref:typename:std::string
getTextNode	playButton.cpp	/^							Node* getTextNode(int i){return textNodes[i];}$/;"	f	class:fsim::PlayButton::onClick::OkButton::onClick::AircraftTabButton	typeref:typename:Node *	file:
getTextboxButton	textbox.h	/^			inline TextboxButton* getTextboxButton(){return textboxButton;}$/;"	f	class:fsim::Textbox	typeref:typename:TextboxButton *
getTime	util.h	/^	inline s64 getTime(){return (s64)(std::chrono::system_clock::now().time_since_epoch()\/std::chr/;"	f	namespace:fsim	typeref:typename:s64
getType	abstractAppState.h	/^			inline Type getType(){return type;}$/;"	f	class:fsim::AbstractAppState	typeref:typename:Type
getType	listbox.h	/^			inline ListboxType getType(){return type;}$/;"	f	class:fsim::Listbox	typeref:typename:ListboxType
getWidth	gameManager.h	/^			inline int getWidth(){return width;}$/;"	f	class:fsim::GameManager	typeref:typename:int
getYaw	aircraft.h	/^			inline float getYaw(){return yawVal;}$/;"	f	class:fsim::Aircraft	typeref:typename:float
getYawSpeed	aircraft.h	/^			inline float getYawSpeed(){return yawSpeed;}$/;"	f	class:fsim::Aircraft	typeref:typename:float
gm	abstractAppState.h	/^			GameManager *gm;$/;"	m	class:fsim::AbstractAppState	typeref:typename:GameManager *
gm	button.h	/^			GameManager *gm;$/;"	m	class:fsim::Button	typeref:typename:GameManager *
gm	exitButton.h	/^			GameManager *gm;$/;"	m	class:fsim::ExitButton	typeref:typename:GameManager *
gm	guiAppState.h	/^			GameManager *gm;$/;"	m	class:fsim::GuiAppState	typeref:typename:GameManager *
gm	inputManager.h	/^			GameManager *gm;$/;"	m	class:fsim::InputManager	typeref:typename:GameManager *
gm	listbox.h	/^			GameManager *gm;$/;"	m	class:fsim::Listbox	typeref:typename:GameManager *
gm	map.h	/^			GameManager *gm;$/;"	m	class:fsim::Map	typeref:typename:GameManager *
gm	structure.h	/^			GameManager *gm;$/;"	m	class:fsim::Structure	typeref:typename:GameManager *
guiNode	button.h	/^			vb01::Node *rectNode,*textNode=nullptr,*guiNode;$/;"	m	class:fsim::Button	typeref:typename:vb01::Node ***
guiNode	listbox.h	/^			vb01::Node *selRectNode,*guiNode;$/;"	m	class:fsim::Listbox	typeref:typename:vb01::Node **
guiNode	structure.h	/^			vb01::Node *rootNode,*guiNode;$/;"	m	class:fsim::Structure	typeref:typename:vb01::Node **
guiNode	textbox.h	/^			vb01::Node *guiNode,*textNode,*cursorNode;$/;"	m	class:fsim::Textbox	typeref:typename:vb01::Node *
height	gameManager.h	/^				int width,height;$/;"	m	struct:fsim::GameManager::Options	typeref:typename:int
height	gameManager.h	/^			int width,height;$/;"	m	class:fsim::GameManager	typeref:typename:int
height	inputManager.cpp	/^	int width,height;$/;"	v	namespace:fsim	typeref:typename:int
helicopter	helicopterAppState.h	/^			Helicopter *helicopter;$/;"	m	class:fsim::HelicopterAppState	typeref:typename:Helicopter *
id	structure.h	/^			int id;$/;"	m	class:fsim::Structure	typeref:typename:int
ids	optionsButton.cpp	/^			vector<int> ids;$/;"	m	struct:fsim::OptionsButton::onClick::Options	typeref:typename:vector<int>	file:
inputManager	gameManager.h	/^			InputManager *inputManager=nullptr;$/;"	m	class:fsim::GameManager	typeref:typename:InputManager *
isActive	button.h	/^			inline bool isActive(){return active;}$/;"	f	class:fsim::Button	typeref:typename:bool
isAttached	abstractAppState.h	/^			inline bool isAttached(){return attached;}$/;"	f	class:fsim::AbstractAppState	typeref:typename:bool
isEnabled	textbox.h	/^			inline bool isEnabled(){return enabled;}$/;"	f	class:fsim::Textbox	typeref:typename:bool
isOpen	listbox.h	/^			inline bool isOpen(){return open;}$/;"	f	class:fsim::Listbox	typeref:typename:bool
isRunning	gameManager.h	/^			inline bool isRunning(){return running;}$/;"	f	class:fsim::GameManager	typeref:typename:bool
isSeparate	button.h	/^			inline bool isSeparate(){return separate;}$/;"	f	class:fsim::Button	typeref:typename:bool
isSuchFile	util.cpp	/^	bool isSuchFile(boost::filesystem::path path){$/;"	f	namespace:fsim	typeref:typename:bool
keyStrings	util.cpp	/^	std::string keyStrings[]{$/;"	v	namespace:fsim	typeref:typename:std::string[]
landIncrement	helicopterAppState.h	/^			float riseIncrement=.5,landIncrement=.5;$/;"	m	class:fsim::HelicopterAppState	typeref:typename:float
landing	helicopter.h	/^			float rising=0,landing=0,risingSpeed=.8,landingSpeed=.5;$/;"	m	class:fsim::Helicopter	typeref:typename:float
landing	helicopterAppState.h	/^			bool leftYaw=0,rightYaw=0,rising=0,landing=0;$/;"	m	class:fsim::HelicopterAppState	typeref:typename:bool
landingSpeed	helicopter.h	/^			float rising=0,landing=0,risingSpeed=.8,landingSpeed=.5;$/;"	m	class:fsim::Helicopter	typeref:typename:float
lastBlinkTime	textbox.h	/^			s64 lastBlinkTime, cursorPosOffset=0;$/;"	m	class:fsim::Textbox	typeref:typename:s64
lastTypeTime	guiAppState.h	/^			s64 lastTypeTime=0;$/;"	m	class:fsim::GuiAppState	typeref:typename:s64
left	structure.h	/^			vb01::Vector3 pos,dir=vb01::Vector3(0,0,-1),left=vb01::Vector3(1,0,0),up=vb01::Vector3(0,1,0)/;"	m	class:fsim::Structure	typeref:typename:vb01::Vector3
leftRoll	activeGameAppState.h	/^			bool forwPitch=false,backPitch=false,leftRoll=false,rightRoll=false;$/;"	m	class:fsim::ActiveGameAppState	typeref:typename:bool
leftYaw	helicopterAppState.h	/^			bool leftYaw=0,rightYaw=0,rising=0,landing=0;$/;"	m	class:fsim::HelicopterAppState	typeref:typename:bool
lights	map.h	/^			std::vector<vb01::Light*> lights;$/;"	m	class:fsim::Map	typeref:typename:std::vector<vb01::Light * >
lines	listbox.h	/^			std::vector<vb01::Text*> lines;$/;"	m	class:fsim::Listbox	typeref:typename:std::vector<vb01::Text * >
listbox	listbox.h	/^					Listbox *listbox = nullptr;$/;"	m	class:fsim::Listbox::ListboxButton	typeref:typename:Listbox *
listboxButton	listbox.h	/^			ListboxButton *listboxButton;$/;"	m	class:fsim::Listbox	typeref:typename:ListboxButton *
listboxes	guiAppState.h	/^			std::vector<Listbox*> listboxes;$/;"	m	class:fsim::GuiAppState	typeref:typename:std::vector<Listbox * >
listboxes	optionsButton.cpp	/^			vector<Listbox*> listboxes;$/;"	m	struct:fsim::OptionsButton::onClick::Options	typeref:typename:vector<Listbox * >	file:
main	main.cpp	/^int main(){$/;"	f	typeref:typename:int
makeTitleScreenButtons	util.cpp	/^	void makeTitleScreenButtons(GameManager *gm){$/;"	f	namespace:fsim	typeref:typename:void
map	inGameAppState.h	/^			Map *map;$/;"	m	class:fsim::InGameAppState	typeref:typename:Map *
mapModel	map.h	/^			vb01::Model* mapModel;$/;"	m	class:fsim::Map	typeref:typename:vb01::Model *
mappings	abstractAppState.h	/^			std::vector<Mapping*> mappings;$/;"	m	class:fsim::AbstractAppState	typeref:typename:std::vector<Mapping * >
mat	structure.h	/^			vb01::Material *mat;$/;"	m	class:fsim::Structure	typeref:typename:vb01::Material *
maxDisplay	listbox.h	/^			int maxDisplay, scrollOffset = 0, selectedOption = 0;$/;"	m	class:fsim::Listbox	typeref:typename:int
model	structure.h	/^			vb01::Model *model;$/;"	m	class:fsim::Structure	typeref:typename:vb01::Model *
mousePosX	listbox.h	/^			double *mousePosX,*mousePosY;$/;"	m	class:fsim::Listbox	typeref:typename:double *
mousePosY	listbox.h	/^			double *mousePosX,*mousePosY;$/;"	m	class:fsim::Listbox	typeref:typename:double **
moveCursor	textbox.cpp	/^	void Textbox::moveCursor(bool left,float charWidth){$/;"	f	class:fsim::Textbox	typeref:typename:void
name	button.h	/^			std::string name;$/;"	m	class:fsim::Button	typeref:typename:std::string
numBinds	defConfigs.h	/^	const static int numStates=4,numBinds[numStates]{0,2,6,8};$/;"	v	namespace:fsim	typeref:typename:const int[]
numStates	defConfigs.h	/^	const static int numStates=4,numBinds[numStates]{0,2,6,8};$/;"	v	namespace:fsim	typeref:typename:const int
numStructures	structureData.h	/^	const int numStructures=4;$/;"	v	namespace:fsim	typeref:typename:const int
okButton	optionsButton.cpp	/^				OkButton *okButton;$/;"	m	class:fsim::OptionsButton::onClick::TabButton	typeref:typename:OkButton *	file:
onAction	abstractAppState.h	/^			virtual void onAction(Mapping::Bind,bool){}$/;"	f	class:fsim::AbstractAppState	typeref:typename:void
onAction	activeGameAppState.h	/^			virtual void onAction(Mapping::Bind,bool){}$/;"	f	class:fsim::ActiveGameAppState	typeref:typename:void
onAction	guiAppState.cpp	/^	void GuiAppState::onAction(Mapping::Bind bind, bool isPressed){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
onAction	helicopterAppState.cpp	/^	void HelicopterAppState::onAction(Mapping::Bind bind, bool isPressed){$/;"	f	class:fsim::HelicopterAppState	typeref:typename:void
onAction	inGameAppState.cpp	/^	void InGameAppState::onAction(Mapping::Bind bind, bool isPressed){$/;"	f	class:fsim::InGameAppState	typeref:typename:void
onAction	jetAppState.cpp	/^	void JetAppState::onAction(Mapping::Bind bind, bool isPressed){$/;"	f	class:fsim::JetAppState	typeref:typename:void
onAnalog	abstractAppState.h	/^			virtual void onAnalog(Mapping::Bind,float){}$/;"	f	class:fsim::AbstractAppState	typeref:typename:void
onAnalog	helicopterAppState.cpp	/^	void HelicopterAppState::onAnalog(Mapping::Bind bind, float str){$/;"	f	class:fsim::HelicopterAppState	typeref:typename:void
onAnalog	inGameAppState.cpp	/^	void InGameAppState::onAnalog(Mapping::Bind bind, float str){$/;"	f	class:fsim::InGameAppState	typeref:typename:void
onAnalog	jetAppState.cpp	/^	void JetAppState::onAnalog(Mapping::Bind bind, float str){$/;"	f	class:fsim::JetAppState	typeref:typename:void
onAttached	abstractAppState.cpp	/^	void AbstractAppState::onAttached(){$/;"	f	class:fsim::AbstractAppState	typeref:typename:void
onAttached	activeGameAppState.cpp	/^	void ActiveGameAppState::onAttached(){$/;"	f	class:fsim::ActiveGameAppState	typeref:typename:void
onAttached	guiAppState.cpp	/^	void GuiAppState::onAttached(){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
onAttached	helicopterAppState.cpp	/^	void HelicopterAppState::onAttached(){$/;"	f	class:fsim::HelicopterAppState	typeref:typename:void
onAttached	inGameAppState.cpp	/^	void InGameAppState::onAttached(){$/;"	f	class:fsim::InGameAppState	typeref:typename:void
onAttached	jetAppState.cpp	/^	void JetAppState::onAttached(){$/;"	f	class:fsim::JetAppState	typeref:typename:void
onClick	button.h	/^			virtual void onClick(){}$/;"	f	class:fsim::Button	typeref:typename:void
onClick	exitButton.cpp	/^	void ExitButton::onClick(){gm->setRunning(false);}$/;"	f	class:fsim::ExitButton	typeref:typename:void
onClick	listbox.cpp	/^	void Listbox::ListboxButton::onClick(){$/;"	f	class:fsim::Listbox::ListboxButton	typeref:typename:void
onClick	listbox.cpp	/^	void Listbox::ScrollingButton::onClick(){}$/;"	f	class:fsim::Listbox::ScrollingButton	typeref:typename:void
onClick	loadButton.cpp	/^	void LoadButton::onClick(){$/;"	f	class:fsim::LoadButton	typeref:typename:void
onClick	mainMenuButton.cpp	/^	void MainMenuButton::onClick(){$/;"	f	class:fsim::MainMenuButton	typeref:typename:void
onClick	optionsButton.cpp	/^							void onClick(){$/;"	f	class:fsim::OptionsButton::onClick::TabButton::onClick::BackButton	typeref:typename:void	file:
onClick	optionsButton.cpp	/^				void onClick(){$/;"	f	class:fsim::OptionsButton::onClick::ControlsTab	typeref:typename:void	file:
onClick	optionsButton.cpp	/^				void onClick(){$/;"	f	class:fsim::OptionsButton::onClick::DefaultsButton	typeref:typename:void	file:
onClick	optionsButton.cpp	/^				void onClick(){$/;"	f	class:fsim::OptionsButton::onClick::OkButton	typeref:typename:void	file:
onClick	optionsButton.cpp	/^				void onClick(){$/;"	f	class:fsim::OptionsButton::onClick::TabButton	typeref:typename:void	file:
onClick	optionsButton.cpp	/^	void OptionsButton::onClick(){$/;"	f	class:fsim::OptionsButton	typeref:typename:void
onClick	playButton.cpp	/^										void onClick(){$/;"	f	class:fsim::PlayButton::onClick::OkButton::onClick::StartButton::onClick::AircraftSelectionButton	typeref:typename:void	file:
onClick	playButton.cpp	/^									void onClick(){$/;"	f	class:fsim::PlayButton::onClick::OkButton::onClick::AircraftTabButton::UpgradeButton	typeref:typename:void	file:
onClick	playButton.cpp	/^							void onClick(){$/;"	f	class:fsim::PlayButton::onClick::OkButton::onClick::AircraftTabButton	typeref:typename:void	file:
onClick	playButton.cpp	/^							void onClick(){$/;"	f	class:fsim::PlayButton::onClick::OkButton::onClick::StartButton	typeref:typename:void	file:
onClick	playButton.cpp	/^				void onClick(){$/;"	f	class:fsim::PlayButton::onClick::OkButton	typeref:typename:void	file:
onClick	playButton.cpp	/^				void onClick(){factionId=faction;}$/;"	f	class:fsim::PlayButton::onClick::FactionButton	typeref:typename:void	file:
onClick	playButton.cpp	/^	void PlayButton::onClick(){$/;"	f	class:fsim::PlayButton	typeref:typename:void
onClick	textbox.cpp	/^	void Textbox::TextboxButton::onClick(){$/;"	f	class:fsim::Textbox::TextboxButton	typeref:typename:void
onDettached	abstractAppState.cpp	/^	void AbstractAppState::onDettached(){$/;"	f	class:fsim::AbstractAppState	typeref:typename:void
onDettached	activeGameAppState.cpp	/^	void ActiveGameAppState::onDettached(){$/;"	f	class:fsim::ActiveGameAppState	typeref:typename:void
onDettached	guiAppState.cpp	/^	void GuiAppState::onDettached(){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
onDettached	helicopterAppState.cpp	/^	void HelicopterAppState::onDettached(){$/;"	f	class:fsim::HelicopterAppState	typeref:typename:void
onDettached	inGameAppState.cpp	/^	void InGameAppState::onDettached(){$/;"	f	class:fsim::InGameAppState	typeref:typename:void
onDettached	jetAppState.cpp	/^	void JetAppState::onDettached(){$/;"	f	class:fsim::JetAppState	typeref:typename:void
onMouseOver	button.h	/^			virtual void onMouseOver(){}$/;"	f	class:fsim::Button	typeref:typename:void
onRawJoystickAxis	abstractAppState.h	/^			virtual void onRawJoystickAxis(short,float){}$/;"	f	class:fsim::AbstractAppState	typeref:typename:void
onRawJoystickAxis	guiAppState.cpp	/^	void GuiAppState::onRawJoystickAxis(short axis, float str){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
onRawJoystickButton	abstractAppState.h	/^			virtual void onRawJoystickButton(short){}$/;"	f	class:fsim::AbstractAppState	typeref:typename:void
onRawJoystickButton	guiAppState.cpp	/^	void GuiAppState::onRawJoystickButton(short s){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
onRawKeyButton	abstractAppState.h	/^			virtual void onRawKeyButton(short){}$/;"	f	class:fsim::AbstractAppState	typeref:typename:void
onRawKeyButton	guiAppState.cpp	/^	void GuiAppState::onRawKeyButton(short ch){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
onRawMouseButton	abstractAppState.h	/^			virtual void onRawMouseButton(short){}$/;"	f	class:fsim::AbstractAppState	typeref:typename:void
onRawMouseButton	guiAppState.cpp	/^	void GuiAppState::onRawMouseButton(short s){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
open	listbox.h	/^			bool open = false;$/;"	m	class:fsim::Listbox	typeref:typename:bool
openUp	listbox.cpp	/^	void Listbox::openUp(){$/;"	f	class:fsim::Listbox	typeref:typename:void
options	gameManager.h	/^			Options options;$/;"	m	class:fsim::GameManager	typeref:typename:Options
options	optionsButton.cpp	/^				Options options;$/;"	m	class:fsim::OptionsButton::onClick::DefaultsButton	typeref:typename:Options	file:
options	optionsButton.cpp	/^				Options options;$/;"	m	class:fsim::OptionsButton::onClick::OkButton	typeref:typename:Options	file:
path	structureData.h	/^	static const std::string path[numStructures]={$/;"	v	namespace:fsim	typeref:typename:const std::string[]
pitch	aircraft.cpp	/^	void Aircraft::pitch(float angle){$/;"	f	class:fsim::Aircraft	typeref:typename:void
pitchIncrement	activeGameAppState.h	/^			float accIncrement=.01,deccIncrement=.01,yawIncrement=.01,rollIncrement=.01,pitchIncrement=.0/;"	m	class:fsim::ActiveGameAppState	typeref:typename:float
pitchSpeed	aircraft.h	/^			float rollSpeed,yawSpeed,pitchSpeed,pitchVal=0,rollVal=0,yawVal=0;$/;"	m	class:fsim::Aircraft	typeref:typename:float
pitchVal	aircraft.h	/^			float rollSpeed,yawSpeed,pitchSpeed,pitchVal=0,rollVal=0,yawVal=0;$/;"	m	class:fsim::Aircraft	typeref:typename:float
playerId	activeGameAppState.h	/^			int playerId;$/;"	m	class:fsim::ActiveGameAppState	typeref:typename:int
playerId	inGameAppState.h	/^			int playerId;$/;"	m	class:fsim::InGameAppState	typeref:typename:int
playerJet	jetAppState.h	/^			Jet *playerJet;$/;"	m	class:fsim::JetAppState	typeref:typename:Jet *
pos	button.h	/^			vb01::Vector2 pos,size;$/;"	m	class:fsim::Button	typeref:typename:vb01::Vector2
pos	listbox.h	/^			vb01::Vector2 pos, size;$/;"	m	class:fsim::Listbox	typeref:typename:vb01::Vector2
pos	structure.h	/^			vb01::Vector3 pos,dir=vb01::Vector3(0,0,-1),left=vb01::Vector3(1,0,0),up=vb01::Vector3(0,1,0)/;"	m	class:fsim::Structure	typeref:typename:vb01::Vector3
pos	textbox.h	/^			vb01::Vector2 pos, size;$/;"	m	class:fsim::Textbox	typeref:typename:vb01::Vector2
posX	inputManager.cpp	/^	double *posX,*posY,strX,strY;$/;"	v	namespace:fsim	typeref:typename:double *
posY	inputManager.cpp	/^	double *posX,*posY,strX,strY;$/;"	v	namespace:fsim	typeref:typename:double **
pressed	mapping.h	/^		bool action,pressed=false;$/;"	m	struct:fsim::Mapping	typeref:typename:bool
readFile	util.cpp	/^	void readFile(string path,std::vector<string> &lines,int firstLine,int lastLine){$/;"	f	namespace:fsim	typeref:typename:void
readOptions	gameManager.cpp	/^	void GameManager::readOptions(){$/;"	f	class:fsim::GameManager	typeref:typename:void
rect	button.h	/^			vb01::Quad *rect;$/;"	m	class:fsim::Button	typeref:typename:vb01::Quad *
rectNode	button.h	/^			vb01::Node *rectNode,*textNode=nullptr,*guiNode;$/;"	m	class:fsim::Button	typeref:typename:vb01::Node *
removeAllButtons	guiAppState.cpp	/^	void GuiAppState::removeAllButtons(Button **exceptions,int numExceptions){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
removeAllGUIElements	guiAppState.cpp	/^	void GuiAppState::removeAllGUIElements(bool removeButtons,bool removeListboxes,bool removeTextb/;"	f	class:fsim::GuiAppState	typeref:typename:void
removeAllListboxes	guiAppState.cpp	/^	void GuiAppState::removeAllListboxes(){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
removeAllTextboxes	guiAppState.cpp	/^	void GuiAppState::removeAllTextboxes(){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
removeButton	guiAppState.cpp	/^	void GuiAppState::removeButton(Button *b){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
removeButton	guiAppState.cpp	/^	void GuiAppState::removeButton(string name){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
removeListbox	guiAppState.cpp	/^	void GuiAppState::removeListbox(Listbox *l){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
removeTextbox	guiAppState.cpp	/^	void GuiAppState::removeTextbox(Textbox *t){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
rightRoll	activeGameAppState.h	/^			bool forwPitch=false,backPitch=false,leftRoll=false,rightRoll=false;$/;"	m	class:fsim::ActiveGameAppState	typeref:typename:bool
rightYaw	helicopterAppState.h	/^			bool leftYaw=0,rightYaw=0,rising=0,landing=0;$/;"	m	class:fsim::HelicopterAppState	typeref:typename:bool
riseIncrement	helicopterAppState.h	/^			float riseIncrement=.5,landIncrement=.5;$/;"	m	class:fsim::HelicopterAppState	typeref:typename:float
rising	helicopter.h	/^			float rising=0,landing=0,risingSpeed=.8,landingSpeed=.5;$/;"	m	class:fsim::Helicopter	typeref:typename:float
rising	helicopterAppState.h	/^			bool leftYaw=0,rightYaw=0,rising=0,landing=0;$/;"	m	class:fsim::HelicopterAppState	typeref:typename:bool
risingSpeed	helicopter.h	/^			float rising=0,landing=0,risingSpeed=.8,landingSpeed=.5;$/;"	m	class:fsim::Helicopter	typeref:typename:float
roll	aircraft.cpp	/^	void Aircraft::roll(float angle){$/;"	f	class:fsim::Aircraft	typeref:typename:void
rollIncrement	activeGameAppState.h	/^			float accIncrement=.01,deccIncrement=.01,yawIncrement=.01,rollIncrement=.01,pitchIncrement=.0/;"	m	class:fsim::ActiveGameAppState	typeref:typename:float
rollSpeed	aircraft.h	/^			float rollSpeed,yawSpeed,pitchSpeed,pitchVal=0,rollVal=0,yawVal=0;$/;"	m	class:fsim::Aircraft	typeref:typename:float
rollVal	aircraft.h	/^			float rollSpeed,yawSpeed,pitchSpeed,pitchVal=0,rollVal=0,yawVal=0;$/;"	m	class:fsim::Aircraft	typeref:typename:float
root	gameManager.h	/^			vb01::Root *root;$/;"	m	class:fsim::GameManager	typeref:typename:vb01::Root *
rootNode	map.h	/^			vb01::Node *rootNode;$/;"	m	class:fsim::Map	typeref:typename:vb01::Node *
rootNode	structure.h	/^			vb01::Node *rootNode,*guiNode;$/;"	m	class:fsim::Structure	typeref:typename:vb01::Node *
rot	structure.h	/^			vb01::Quaternion rot;$/;"	m	class:fsim::Structure	typeref:typename:vb01::Quaternion
running	gameManager.h	/^			bool running=false;$/;"	m	class:fsim::GameManager	typeref:typename:bool
s16	util.h	/^	typedef short s16;$/;"	t	namespace:fsim	typeref:typename:short
s32	util.h	/^	typedef int s32;$/;"	t	namespace:fsim	typeref:typename:int
s64	util.h	/^	typedef long long s64;$/;"	t	namespace:fsim	typeref:typename:long long
s8	util.h	/^	typedef char s8;$/;"	t	namespace:fsim	typeref:typename:char
scrollDown	listbox.cpp	/^	void Listbox::scrollDown(){$/;"	f	class:fsim::Listbox	typeref:typename:void
scrollOffset	listbox.h	/^			int maxDisplay, scrollOffset = 0, selectedOption = 0;$/;"	m	class:fsim::Listbox	typeref:typename:int
scrollUp	listbox.cpp	/^	void Listbox::scrollUp(){$/;"	f	class:fsim::Listbox	typeref:typename:void
scrollingButton	listbox.h	/^			ScrollingButton *scrollingButton;$/;"	m	class:fsim::Listbox	typeref:typename:ScrollingButton *
selRectNode	listbox.h	/^			vb01::Node *selRectNode,*guiNode;$/;"	m	class:fsim::Listbox	typeref:typename:vb01::Node *
selectedOption	listbox.h	/^			int maxDisplay, scrollOffset = 0, selectedOption = 0;$/;"	m	class:fsim::Listbox	typeref:typename:int
separate	button.h	/^			bool separate,active=true;$/;"	m	class:fsim::Button	typeref:typename:bool
setColor	button.cpp	/^	void Button::setColor(Vector4 c){$/;"	f	class:fsim::Button	typeref:typename:void
setEntry	textbox.cpp	/^	void Textbox::setEntry(string entry){$/;"	f	class:fsim::Textbox	typeref:typename:void
setLanding	helicopter.h	/^			inline void setLanding(float l){this->landing=l;}$/;"	f	class:fsim::Helicopter	typeref:typename:void
setOptions	optionsButton.cpp	/^				void setOptions(Options o){this->options=o;}$/;"	f	class:fsim::OptionsButton::onClick::DefaultsButton	typeref:typename:void	file:
setOptions	optionsButton.cpp	/^				void setOptions(Options o){this->options=o;}$/;"	f	class:fsim::OptionsButton::onClick::OkButton	typeref:typename:void	file:
setPitch	aircraft.cpp	/^	void Aircraft::setPitch(float p){$/;"	f	class:fsim::Aircraft	typeref:typename:void
setPlayerId	inGameAppState.h	/^			inline void setPlayerId(int id){this->playerId=id;}$/;"	f	class:fsim::InGameAppState	typeref:typename:void
setPos	button.cpp	/^	void Button::setPos(Vector2 pos){$/;"	f	class:fsim::Button	typeref:typename:void
setPos	structure.h	/^			inline void setPos(vb01::Vector3 p){this->pos=p;}$/;"	f	class:fsim::Structure	typeref:typename:void
setRising	helicopter.h	/^			inline void setRising(float r){this->rising=r;}$/;"	f	class:fsim::Helicopter	typeref:typename:void
setRoll	aircraft.cpp	/^	void Aircraft::setRoll(float r){$/;"	f	class:fsim::Aircraft	typeref:typename:void
setRunning	gameManager.h	/^			inline void setRunning(bool r){this->running=r;}$/;"	f	class:fsim::GameManager	typeref:typename:void
setSize	button.cpp	/^	void Button::setSize(Vector2 size){$/;"	f	class:fsim::Button	typeref:typename:void
setYaw	aircraft.cpp	/^	void Aircraft::setYaw(float y){$/;"	f	class:fsim::Aircraft	typeref:typename:void
setZOrder	button.cpp	/^	void Button::setZOrder(float zOrder){$/;"	f	class:fsim::Button	typeref:typename:void
shiftPressed	guiAppState.h	/^			bool shiftPressed=false;$/;"	m	class:fsim::GuiAppState	typeref:typename:bool
size	button.h	/^			vb01::Vector2 pos,size;$/;"	m	class:fsim::Button	typeref:typename:vb01::Vector2
size	listbox.h	/^			vb01::Vector2 pos, size;$/;"	m	class:fsim::Listbox	typeref:typename:vb01::Vector2
size	textbox.h	/^			vb01::Vector2 pos, size;$/;"	m	class:fsim::Textbox	typeref:typename:vb01::Vector2
stateManager	gameManager.h	/^			StateManager *stateManager=nullptr;$/;"	m	class:fsim::GameManager	typeref:typename:StateManager *
stateManager	inputManager.h	/^			StateManager *stateManager;$/;"	m	class:fsim::InputManager	typeref:typename:StateManager *
strX	inputManager.cpp	/^	double *posX,*posY,strX,strY;$/;"	v	namespace:fsim	typeref:typename:double **
strY	inputManager.cpp	/^	double *posX,*posY,strX,strY;$/;"	v	namespace:fsim	typeref:typename:double **
structures	activeGameAppState.h	/^			std::vector<Structure*> structures;$/;"	m	class:fsim::ActiveGameAppState	typeref:typename:std::vector<Structure * >
structures	inGameAppState.h	/^			std::vector<Structure*> structures;$/;"	m	class:fsim::InGameAppState	typeref:typename:std::vector<Structure * >
tabs	playButton.cpp	/^							AircraftTabButton *tabs[3];$/;"	m	class:fsim::PlayButton::onClick::OkButton::onClick::StartButton	typeref:typename:AircraftTabButton * [3]	file:
text	button.h	/^			vb01::Text *text=nullptr;$/;"	m	class:fsim::Button	typeref:typename:vb01::Text *
text	textbox.h	/^			vb01::Text *text;$/;"	m	class:fsim::Textbox	typeref:typename:vb01::Text *
textNode	button.h	/^			vb01::Node *rectNode,*textNode=nullptr,*guiNode;$/;"	m	class:fsim::Button	typeref:typename:vb01::Node **
textNode	textbox.h	/^			vb01::Node *guiNode,*textNode,*cursorNode;$/;"	m	class:fsim::Textbox	typeref:typename:vb01::Node **
textNodes	playButton.cpp	/^							Node *textNodes[5]{0,0,0,0,0};$/;"	m	class:fsim::PlayButton::onClick::OkButton::onClick::AircraftTabButton	typeref:typename:Node * [5]	file:
textbox	playButton.cpp	/^				Textbox *textbox;$/;"	m	class:fsim::PlayButton::onClick::OkButton	typeref:typename:Textbox *	file:
textbox	textbox.h	/^					Textbox *textbox;$/;"	m	class:fsim::Textbox::TextboxButton	typeref:typename:Textbox *
textboxButton	textbox.h	/^			TextboxButton *textboxButton;$/;"	m	class:fsim::Textbox	typeref:typename:TextboxButton *
textboxes	guiAppState.h	/^			std::vector<Textbox*> textboxes;$/;"	m	class:fsim::GuiAppState	typeref:typename:std::vector<Textbox * >
textboxes	optionsButton.cpp	/^			vector<Textbox*> textboxes;$/;"	m	struct:fsim::OptionsButton::onClick::Options	typeref:typename:vector<Textbox * >	file:
trigger	mapping.h	/^		int trigger;$/;"	m	struct:fsim::Mapping	typeref:typename:int
triggers	util.cpp	/^	int triggers[]{$/;"	v	namespace:fsim	typeref:typename:int[]
type	abstractAppState.h	/^			Type type;$/;"	m	class:fsim::AbstractAppState	typeref:typename:Type
type	listbox.h	/^			ListboxType type;$/;"	m	class:fsim::Listbox	typeref:typename:ListboxType
type	mapping.h	/^		BindType type;$/;"	m	struct:fsim::Mapping	typeref:typename:BindType
type	textbox.cpp	/^	void Textbox::type(char c, bool capitalLetters){$/;"	f	class:fsim::Textbox	typeref:typename:void
u16	util.h	/^	typedef unsigned short u16;$/;"	t	namespace:fsim	typeref:typename:unsigned short
u32	util.h	/^	typedef unsigned int u32;$/;"	t	namespace:fsim	typeref:typename:unsigned int
u64	util.h	/^	typedef unsigned long long u64;$/;"	t	namespace:fsim	typeref:typename:unsigned long long
u8	util.h	/^	typedef unsigned char u8;$/;"	t	namespace:fsim	typeref:typename:unsigned char
up	structure.h	/^			vb01::Vector3 pos,dir=vb01::Vector3(0,0,-1),left=vb01::Vector3(1,0,0),up=vb01::Vector3(0,1,0)/;"	m	class:fsim::Structure	typeref:typename:vb01::Vector3
update	abstractAppState.cpp	/^	void AbstractAppState::update(){}$/;"	f	class:fsim::AbstractAppState	typeref:typename:void
update	activeGameAppState.cpp	/^	void ActiveGameAppState::update(){}$/;"	f	class:fsim::ActiveGameAppState	typeref:typename:void
update	aircraft.cpp	/^	void Aircraft::update(){$/;"	f	class:fsim::Aircraft	typeref:typename:void
update	building.cpp	/^	void Building::update(){}$/;"	f	class:fsim::Building	typeref:typename:void
update	button.cpp	/^	void Button::update(){}$/;"	f	class:fsim::Button	typeref:typename:void
update	gameManager.cpp	/^	void GameManager::update(){$/;"	f	class:fsim::GameManager	typeref:typename:void
update	guiAppState.cpp	/^	void GuiAppState::update(){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
update	helicopter.cpp	/^	void Helicopter::update(){$/;"	f	class:fsim::Helicopter	typeref:typename:void
update	helicopterAppState.cpp	/^	void HelicopterAppState::update(){$/;"	f	class:fsim::HelicopterAppState	typeref:typename:void
update	inGameAppState.cpp	/^	void InGameAppState::update(){$/;"	f	class:fsim::InGameAppState	typeref:typename:void
update	inputManager.cpp	/^	void InputManager::update(){$/;"	f	class:fsim::InputManager	typeref:typename:void
update	jet.cpp	/^	void Jet::update(){$/;"	f	class:fsim::Jet	typeref:typename:void
update	jetAppState.cpp	/^	void JetAppState::update(){$/;"	f	class:fsim::JetAppState	typeref:typename:void
update	listbox.cpp	/^	void Listbox::update(){$/;"	f	class:fsim::Listbox	typeref:typename:void
update	map.cpp	/^	void Map::update(){}$/;"	f	class:fsim::Map	typeref:typename:void
update	stateManager.cpp	/^	void StateManager::update(){$/;"	f	class:fsim::StateManager	typeref:typename:void
update	structure.cpp	/^	void Structure::update(){$/;"	f	class:fsim::Structure	typeref:typename:void
update	textbox.cpp	/^	void Textbox::update(){$/;"	f	class:fsim::Textbox	typeref:typename:void
update	unit.cpp	/^	void Unit::update(){$/;"	f	class:fsim::Unit	typeref:typename:void
updateControlsListbox	guiAppState.cpp	/^	void GuiAppState::updateControlsListbox(Mapping::BindType bt, bool action, short trigger){$/;"	f	class:fsim::GuiAppState	typeref:typename:void
upgradeButtons	playButton.cpp	/^							UpgradeButton *upgradeButtons[20]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};$/;"	m	class:fsim::PlayButton::onClick::OkButton::onClick::AircraftTabButton	typeref:typename:UpgradeButton * [20]	file:
upgrades	playButton.cpp	/^							string upgrades[5];$/;"	m	class:fsim::PlayButton::onClick::OkButton::onClick::AircraftTabButton	typeref:typename:string[5]	file:
vb01	aircraft.h	/^namespace vb01{$/;"	n
vb01	button.h	/^namespace vb01{$/;"	n
vb01	gameManager.h	/^namespace vb01{$/;"	n
vb01	listbox.h	/^namespace vb01{$/;"	n
vb01	map.h	/^namespace vb01{$/;"	n
vb01	structure.h	/^namespace vb01{$/;"	n
vb01	textbox.h	/^namespace vb01{$/;"	n
width	gameManager.h	/^				int width,height;$/;"	m	struct:fsim::GameManager::Options	typeref:typename:int
width	gameManager.h	/^			int width,height;$/;"	m	class:fsim::GameManager	typeref:typename:int
width	inputManager.cpp	/^	int width,height;$/;"	v	namespace:fsim	typeref:typename:int
window	inputManager.h	/^			GLFWwindow *window;$/;"	m	class:fsim::InputManager	typeref:typename:GLFWwindow *
writeFile	util.cpp	/^	void writeFile(string path,std::vector<string> &lines){$/;"	f	namespace:fsim	typeref:typename:void
yaw	aircraft.cpp	/^	void Aircraft::yaw(float angle){$/;"	f	class:fsim::Aircraft	typeref:typename:void
yawIncrement	activeGameAppState.h	/^			float accIncrement=.01,deccIncrement=.01,yawIncrement=.01,rollIncrement=.01,pitchIncrement=.0/;"	m	class:fsim::ActiveGameAppState	typeref:typename:float
yawSpeed	aircraft.h	/^			float rollSpeed,yawSpeed,pitchSpeed,pitchVal=0,rollVal=0,yawVal=0;$/;"	m	class:fsim::Aircraft	typeref:typename:float
yawVal	aircraft.h	/^			float rollSpeed,yawSpeed,pitchSpeed,pitchVal=0,rollVal=0,yawVal=0;$/;"	m	class:fsim::Aircraft	typeref:typename:float
~AbstractAppState	abstractAppState.cpp	/^	AbstractAppState::~AbstractAppState(){}$/;"	f	class:fsim::AbstractAppState
~Aircraft	aircraft.cpp	/^	Aircraft::~Aircraft(){}$/;"	f	class:fsim::Aircraft
~Building	building.cpp	/^	Building::~Building(){}$/;"	f	class:fsim::Building
~Button	button.cpp	/^	Button::~Button(){$/;"	f	class:fsim::Button
~GameManager	gameManager.cpp	/^	GameManager::~GameManager(){}$/;"	f	class:fsim::GameManager
~GuiAppState	guiAppState.cpp	/^	GuiAppState::~GuiAppState(){}$/;"	f	class:fsim::GuiAppState
~Helicopter	helicopter.cpp	/^	Helicopter::~Helicopter(){}$/;"	f	class:fsim::Helicopter
~HelicopterAppState	helicopterAppState.cpp	/^	HelicopterAppState::~HelicopterAppState(){}$/;"	f	class:fsim::HelicopterAppState
~InGameAppState	inGameAppState.cpp	/^	InGameAppState::~InGameAppState(){}$/;"	f	class:fsim::InGameAppState
~InputManager	inputManager.cpp	/^	InputManager::~InputManager(){}$/;"	f	class:fsim::InputManager
~Jet	jet.cpp	/^	Jet::~Jet(){}$/;"	f	class:fsim::Jet
~JetAppState	jetAppState.cpp	/^	JetAppState::~JetAppState(){}$/;"	f	class:fsim::JetAppState
~Listbox	listbox.cpp	/^	Listbox::~Listbox(){$/;"	f	class:fsim::Listbox
~Map	map.cpp	/^	Map::~Map(){}$/;"	f	class:fsim::Map
~StateManager	stateManager.cpp	/^	StateManager::~StateManager(){}$/;"	f	class:fsim::StateManager
~Structure	structure.cpp	/^	Structure::~Structure(){}$/;"	f	class:fsim::Structure
~Textbox	textbox.cpp	/^	Textbox::~Textbox(){$/;"	f	class:fsim::Textbox
~Unit	unit.cpp	/^	Unit::~Unit(){}$/;"	f	class:fsim::Unit
